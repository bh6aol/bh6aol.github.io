<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ADB发送中文到手机</title>
    <url>/2020/04/23/ADB%E5%8F%91%E9%80%81%E4%B8%AD%E6%96%87%E5%88%B0%E6%89%8B%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="1-何为ADB"><a href="#1-何为ADB" class="headerlink" title="1.何为ADB"></a>1.何为ADB</h2><p>Android 调试桥 (Android Debug Bridge, adb) 是一种功能多样的命令行工具，可让您与设备进行通信。adb  命令可用于执行各种设备操作（例如安装和调试应用），并提供对 Unix  shell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序，包括以下三个组件：<a href="https://developer.android.google.cn/studio/command-line/adb">… …</a></p>
<h2 id="2-故事"><a href="#2-故事" class="headerlink" title="2.故事"></a>2.故事</h2><p>因为业务需求，需要使用adb命令模拟点击和填写文字（中文，英文，数字），adb发送文字大家都知道是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input text &quot;Hello&quot;</span><br></pre></td></tr></table></figure>

<p>这样就可以将Hello推送到手机上当前对焦的如TextView等输入控件上。当时当我尝试如下命令就会出现无法推送到情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input text &quot;你好&quot;</span><br></pre></td></tr></table></figure>

<p>通过搜索引擎得知目前adb因为设计的缺陷无法发送中文字符（unicode），于是又通过搜索引擎找到了一个开源工具<a href="https://github.com/senzhk/ADBKeyBoard%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%89%E8%A3%85%E6%AD%A4%E8%BE%93%E5%85%A5%E6%B3%95%E5%B9%B6%E5%B0%86%E5%85%B6%E8%AE%BE%E7%BD%AE%E4%B8%BA%E9%BB%98%E8%AE%A4%E8%BE%93%E5%85%A5%E6%B3%95%E5%8D%B3%E5%8F%AF%E9%80%9A%E8%BF%87adb%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E4%B8%AD%E6%96%87%EF%BC%88%E8%BF%99%E9%87%8C%E6%B5%8B%E8%AF%95%E9%AD%85%E6%97%8F%E9%83%A8%E5%88%86%E6%9C%BA%E5%9E%8B%E6%97%A0%E6%B3%95%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E8%BE%93%E5%85%A5%E6%B3%95%EF%BC%8C%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%ACFlyme">https://github.com/senzhk/ADBKeyBoard，通过安装此输入法并将其设置为默认输入法即可通过adb方式发送中文（这里测试魅族部分机型无法修改系统输入法，系统版本Flyme</a>  8.0.0.0A）华为部分机型可以设置，部分小米手机也可以，但是你要额外开启USB安全模式。接下来就是按照ADBKeyBoard给出的使用方法进行测试了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell am broadcast -a ADB_INPUT_TEXT --es msg &#39;你好嗎? Hello?&#39;</span><br></pre></td></tr></table></figure>

<p>然而，第一个用例就翻车了，出现了乱码，不过还好至少能有反应了。继续阅读，发现下面有类似将字符进行Base64编码后再丢给工具进行发送的例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* For Mac&#x2F;Linux, you can use the latest base64 input type with base64 command line tool:</span><br><span class="line">adb shell am broadcast -a ADB_INPUT_B64 --es msg &#96;echo &#39;你好嗎? Hello?&#39; | base64&#96;</span><br></pre></td></tr></table></figure>

<p>但是很遗憾，我是Python3(Windows10)平台，于是得对这条命令进行改造在pyton中写一个汉字转base64编码的方法即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def hans_to_base64(hans):</span><br><span class="line">    return base64.b64encode(hans.encode(&quot;utf-8&quot;)).decode()</span><br></pre></td></tr></table></figure>

<p>一行搞定，接下来只要在需要发送中文的地方进行如下调用即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os.system(&quot;adb shell am broadcast -a ADB_INPUT_B64 --es msg &quot; + hans_to_base64(&quot;你好&quot;))</span><br></pre></td></tr></table></figure>

<h2 id="3-ABD常用命令"><a href="#3-ABD常用命令" class="headerlink" title="3.ABD常用命令"></a>3.ABD常用命令</h2><p><strong>1.adb devices</strong> , 获取设备列表及设备状态</p>
<p><strong>2.adb get-state</strong> , 获取设备的状态</p>
<ol>
<li>设备的状态有 3 钟，device , offline , unknown</li>
<li>device：设备正常连接</li>
<li>offline：连接出现异常，设备无响应</li>
<li>unknown：没有连接设备</li>
</ol>
<p>**3.**<strong>安装卸载应用程序</strong></p>
<p><strong>adb install</strong> <strong>用于安装</strong></p>
<ul>
<li>安装成功，返回成功提示 “Success”；</li>
<li>安装失败，会返回以下：</li>
<li>INSTALL_FAILED_ALREADY_EXISTS</li>
<li>此时需要用 -r 参数来重新安装。</li>
<li>INSTALL_FAILED_SIGNATURE_ERROR</li>
<li>应用的签名不一致，可能是发布版和调试版签名不同所致。也有可能是没卸载旧应用导致。</li>
<li>INSTALL_FAILED_INSUFFICIENT_STORAGE</li>
<li>存储空间不足，需要检查设备存储情况。</li>
</ul>
<p><strong>adb uninstall</strong> <strong>用于卸载</strong></p>
<ul>
<li>adb uninstall 后面带的是应用的包名，而不是应用名。</li>
<li>查看系统所有应用的包名：</li>
<li>adb shell pm list packages –f</li>
</ul>
<p><strong>4****．上传、下载文件</strong></p>
<ul>
<li>adb push 命令将PC机上的文件推到 DLT-RK3288 机器上；</li>
<li>adb pull 命令将DLT-RK3288机器上的文件拉到PC机上；</li>
<li>例如：</li>
<li>adb push d:/new.txt /sdcard/</li>
<li>将D盘下new.txt文件 推到内部存储器</li>
<li>adb pull /sdcard/new.txt  d:\</li>
<li>将DLT-RK3288 内部存储器根目录下的new.txt 拉到D盘</li>
</ul>
<p><strong>5. adb shell pm list package</strong> </p>
<p>Package Manager , 可以用获取到一些安装在 Android 设备上得应用信息</p>
<p>-s：列出系统应用</p>
<p>-f：列出应用包名及对应的apk名及存放位置</p>
<p><strong>5.adb shell</strong></p>
<p>通过adb shell 命令，就可以进入设备或者模拟器的shell环境了，在这个Linux shell中，我们就可以执行各种Linux命令了。</p>
<p>如果只想执行一条shell命令，就可以采用：adb shell [shell_command]，在实际使用中，经常与grep或findstr一起使用，起到过滤作用，查看自己需要的关键信息。</p>
<p><strong>6. 常见命令：</strong></p>
<p>如 ls, cd, rm, mkdir, touch, pwd, cp, mv, ifconfig, netstat, ping, ps, top等，进入adb shell即可执行，与linux相似</p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang并发之道-for循环中的goroutine</title>
    <url>/2019/12/16/Golang%E5%B9%B6%E5%8F%91%E4%B9%8B%E9%81%93-for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84goroutine/</url>
    <content><![CDATA[<p>先看一段代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	<span class="keyword">for</span> _, sal := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125; &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> wg.Done()</span><br><span class="line">			fmt.Println(sal)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一眼看上去程序很简单啊，就是一个for循环，每次循环时起一个goroutine啊？</p>
<p>那么执行结果应该是什么呢，慢着！goroutine不是立即起的哎！难道是乱序打印a,b,c???</p>
<p>run一下便知！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">c</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<p>为何都是c？ 难道是巧合？多跑几次试试？</p>
<p>emmmmm，实锤了，就是c！</p>
<p>哈子玩意？</p>
<p>书上这样解释：</p>
<p><strong>goroutine正在运行一个闭包，该闭包使用变量sal时，字符串迭代已经结束。</strong></p>
<p>那goroutine运行时sal从何而来？如果不幸被GC收走怎么办？</p>
<p><strong>这是一个关于如何管理内存的有趣的点。Golang运行时会足够小心的将对变量sal值的引用仍然保留，由内存转移到堆，一便goroutine可以继续访问它。</strong></p>
<p><strong>通常我们计算机上。在任何goroutine开始运行之前，循环就会退出，所以sal会被转移到堆中，即在堆中的sal为字符切片中  最后一个值c，所以通常会看到三次c。编写这个循环的正确方式是将sal的副本传递到闭包中，这样当goroutine运行时，它将从循环的迭代中操作数据。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	<span class="keyword">for</span> _, sal := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125; &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(sal <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> wg.Done()</span><br><span class="line">			fmt.Println(sal)</span><br><span class="line">		&#125;(sal)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>这下运行结果就对了（随机打印a，b，c）！</p>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Android GridLayout 自適應</title>
    <url>/2020/04/11/Android-GridLayout-%E8%87%AA%E9%81%A9%E6%87%89/</url>
    <content><![CDATA[<p>最近趁著學習安卓開發，順便將去年暑假就想寫的Loan項目快速構建一下。想寫個菜單界面。決定用網格佈局試一試，但是網友普遍對網格佈局不看好。可能是因爲早期的網格佈局不支持權重的原因吧？總之今天就記錄一下我的踩坑過程。</p>
<p>首先看一下xml佈局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MenuActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#EEEEEE&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;GridLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;</span><br><span class="line">        android:columnCount=&quot;3&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/contract_btu&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector_contract&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/invoice_btu&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector_invoice&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/record_btu&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector_record&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;我的合同&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;借據詳情&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;還款記錄&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/planning_btu&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector_planning&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/software_btu&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector_software&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/more_btu&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector_more&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;還款計劃&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;軟件信息&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_columnWeight=&quot;1&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;更多工具&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/20200411215223.png" alt="img"></p>
<p>如左圖所示，采用三列的網格，行數沒有固定，其中圖標和圖標下面的文字是等價的，都屬於網格裏面的元素。其中的關鍵點就是將所有網格中的元素列權重全部設置為1，讓它們權重一隻。還有就是設置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:layout_width=&quot;0dp&quot;</span><br></pre></td></tr></table></figure>

<p>此屬性是將控件的佈局寬度設置為0，這樣網格佈局就可以等距自適應的排列内部的控件了。</p>
<p>———分割綫————-</p>
<p>順便提一下，在寫還貸計劃這個子Actively的時候發現Android沒有什麽好用的表格控件，看了幾個github上面的開源項目感覺有點複雜。這是我突然想到了上次折騰小説項目使用的WebView，正好我從銀行下載了計劃的csv文件，於是直接用csv2html將計劃轉成了html的table表格。然後使用Android的assets將其存儲，最終通過webview展示出來，感覺顯示效果還是蠻不錯的。</p>
<p>這次App和服務器之間的數據傳輸我封裝了一個API，數據格式是JSON，還加了一個TOKEN作爲簡單的校驗，不過論安全性還是RSA，AES來的舒服啊。</p>
<p>再説還準備改進的地方就是okhttp的多綫程問題，還有就是從服務器獲取的數據持久化本地sqlite數據庫的問題有待解決。最後一個目前能想到的容易實現的就是檢查升級功能。</p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUNIT : CLASS NOT FOUND: &#39;MYTEST&#39;</title>
    <url>/2021/02/08/JUNIT-CLASS-NOT-FOUND-MYTEST/</url>
    <content><![CDATA[<h2 id="0、错误内容"><a href="#0、错误内容" class="headerlink" title="0、错误内容"></a>0、错误内容</h2><p>在使用IDEA编写SSM项目时，准备编写一个MyTest测试类来进行单元测试，结果出现如下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Process finished with exit code 1</span><br><span class="line">Class not found: &quot;MyTest&quot;</span><br></pre></td></tr></table></figure>

<h2 id="1、解决方法"><a href="#1、解决方法" class="headerlink" title="1、解决方法"></a>1、解决方法</h2><p>可以尝试将项目里面的.iml文件删除，然后重新加载项目即可修复。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>error</tag>
        <tag>junit</tag>
      </tags>
  </entry>
  <entry>
    <title>MIME测试</title>
    <url>/2019/11/23/MIME%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<blockquote>
<p><strong>多用途互联网邮件扩展</strong>（英语：<strong>M</strong>ultipurpose <strong>I</strong>nternet <strong>M</strong>ail <strong>E</strong>xtensions，缩写：<strong>MIME</strong>）是一个<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%A0%87%E5%87%86">互联网标准</a>，它扩展了<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件</a>标准，使其能够支持：</p>
<ul>
<li>非<a href="https://zh.wikipedia.org/wiki/ASCII">ASCII</a>字符文本；</li>
<li>非文本格式附件（<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a>、声音、图像等）；</li>
<li>由多部分（multiple parts）组成的消息体；</li>
<li>包含非<a href="https://zh.wikipedia.org/wiki/ASCII">ASCII</a>字符的头信息（Header information）。这个标准被定义在 <a href="https://tools.ietf.org/html/rfc2045">RFC 2045</a>、<a href="https://tools.ietf.org/html/rfc2046">RFC 2046</a>、<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>、<a href="https://tools.ietf.org/html/rfc2048">RFC 2048</a>、<a href="https://tools.ietf.org/html/rfc2049">RFC 2049</a> 等<a href="https://zh.wikipedia.org/wiki/RFC">RFC</a>中。</li>
</ul>
<p>MIME改善了由 <a href="https://tools.ietf.org/html/rfc822">RFC 822</a> 转变而来的 <a href="https://tools.ietf.org/html/rfc2822">RFC 2822</a> ，这些旧标准规定<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件</a>标准并不允许在邮件消息中使用7位ASCII字符集以外的字符。正因如此，一些非英语字符消息和二进制文件，图像，声音等非文字消息原本都不能在电子邮件中传输（MIME可以）。MIME规定了用于表示各种各样的数据类型的符号化方法。此外，在<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">万维网</a>中使用的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">HTTP协议</a>中也使用了MIME的框架，标准被扩展为<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B">互联网媒体类型</a>。</p>
</blockquote>
<p>上学期写的senCQ（Java特别版）当时准备使用但由于时间仓促没有仔细研究就无脑切后缀了；现在回过头来研究一下。</p>
<p>发现MIME的Java官方实现也几乎是更具后缀猜嘛？</p>
<p>对于这些你能想到的功能不要一上来就想着自己造轮子（当然如果时间允许，自己造个轮子又何妨？）</p>
<p>首先我们要看一下这个功能官方是否已经实现？比如base64编码，官网已经实现；而我却不知道跑去apache下codec多跑冤枉路！</p>
<p>如果官方已经帮我们办好的话，并且官方的轮子可以在我们的应用场景下转起来；那么就官方即可。</p>
<p>如果官方没有轮子或者官方的轮子不是很好，那么我们就得找第三方的轮子了！</p>
<p>最后！！！很不幸，没有找到第三方轮子，亦或是第三方的轮子根本转不了，这时候你可以尝试修复一下别人的轮子（上次闲着写了个senMusic）找了个网上找了个lrc-parser的轮子，结果转的不是很顺溜，简单修复一下就OK了；如果没有别人的轮子，那就自己动手，丰衣足食！</p>
<p>说了这么多，直接进入正题吧！直接看代码，一目了然！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	<span class="comment">// write your code here</span></span><br><span class="line">        Path path = Paths.get(<span class="string">&quot;D:/未命名.html&quot;</span>);</span><br><span class="line">        System.out.println(Files.probeContentType(path));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">text/html</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>结果如上！！！</p>
<p>但是当我把文件后缀名改为exe结果又如下所示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">application&#x2F;x-msdownload</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>所以说嘛，只是简单的后缀判断，猜测而已不然为啥叫**<code>probeContentType</code>**</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MYBATIS-2-整合SPRING5</title>
    <url>/2021/02/05/MYBATIS-2-%E6%95%B4%E5%90%88SPRING5/</url>
    <content><![CDATA[<h1 id="0、测试用的SQL"><a href="#0、测试用的SQL" class="headerlink" title="0、测试用的SQL"></a>0、测试用的SQL</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis` <span class="keyword">DEFAULT</span> CHARSET utf8; </span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">	`uid` <span class="type">INT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	`uname` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`upwd` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB,<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span>(<span class="number">1</span>,&quot;BH6AOL&quot;,&quot;123456&quot;),</span><br><span class="line">(<span class="number">2</span>,&quot;BA1AA&quot;,&quot;654321&quot;),</span><br><span class="line">(<span class="number">3</span>,&quot;BA1BB&quot;,&quot;111111&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>

<h1 id="1、先看pom依赖"><a href="#1、先看pom依赖" class="headerlink" title="1、先看pom依赖"></a>1、先看pom依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2、编写三个配置文件"><a href="#2、编写三个配置文件" class="headerlink" title="2、编写三个配置文件"></a>2、编写三个配置文件</h1><ul>
<li>applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入spring-dao.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.sencom.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第二种方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top.sencom.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>spring-dao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    DataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        绑定mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:top/sencom/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    就是sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入，没有set方法！！！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3、编写一个pojo"><a href="#3、编写一个pojo" class="headerlink" title="3、编写一个pojo"></a>3、编写一个pojo</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String upwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="4、编写UserMapper接口和xml配置"><a href="#4、编写UserMapper接口和xml配置" class="headerlink" title="4、编写UserMapper接口和xml配置"></a>4、编写UserMapper接口和xml配置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sencom.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;top.sencom.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;top.sencom.pojo.User&quot;</span> &gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="5、编写两个实现类分别测试两种方式"><a href="#5、编写两个实现类分别测试两种方式" class="headerlink" title="5、编写两个实现类分别测试两种方式"></a>5、编写两个实现类分别测试两种方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> top.sencom.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我的的所有操作都使用sqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSessionTemplate.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"><span class="keyword">import</span> top.sencom.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> top.sencom.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> top.sencom.mapper.UserMapperImpl;</span><br><span class="line"><span class="keyword">import</span> top.sencom.mapper.UserMapperImpl2;</span><br><span class="line"><span class="keyword">import</span> top.sencom.pojo.User;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapperImpl.class);</span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.getUsers()) &#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper2&quot;</span>, UserMapperImpl2.class);</span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.getUsers()) &#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MYBATIS-1-第一个例子</title>
    <url>/2021/02/01/MYBATIS-1-%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<h2 id="0、编写测试数据库"><a href="#0、编写测试数据库" class="headerlink" title="0、编写测试数据库"></a>0、编写测试数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis` <span class="keyword">DEFAULT</span> CHARSET utf8; </span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">	`uid` <span class="type">INT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	`uname` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`upwd` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB,<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span>(<span class="number">1</span>,&quot;BH6AOL&quot;,&quot;123456&quot;),</span><br><span class="line">(<span class="number">2</span>,&quot;BA1AA&quot;,&quot;654321&quot;),</span><br><span class="line">(<span class="number">3</span>,&quot;BA1BB&quot;,&quot;111111&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>

<h2 id="1、IDEA新建空maven项目，先看我的pom-xml"><a href="#1、IDEA新建空maven项目，先看我的pom-xml" class="headerlink" title="1、IDEA新建空maven项目，先看我的pom.xml"></a>1、IDEA新建空maven项目，先看我的pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            Mysql Driver--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    加载src下的xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再看项目结构截图：</p>
<p><img src="/images/20210201110816.png" alt="img"></p>
<h2 id="2、编写对应的实体类"><a href="#2、编写对应的实体类" class="headerlink" title="2、编写对应的实体类"></a>2、编写对应的实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String upwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> uid, String uname, String upwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">        <span class="keyword">this</span>.upwd = upwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUpwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpwd</span><span class="params">(String upwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upwd = upwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, uname=&#x27;&quot;</span> + uname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, upwd=&#x27;&quot;</span> + upwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、编写Dao层的UserMapper接口和UserMapper-xml"><a href="#3、编写Dao层的UserMapper接口和UserMapper-xml" class="headerlink" title="3、编写Dao层的UserMapper接口和UserMapper.xml"></a>3、编写Dao层的UserMapper接口和UserMapper.xml</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sencom.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;top.sencom.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;top.sencom.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;top.sencom.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;top.sencom.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user values (#&#123;uid&#125;,#&#123;uname&#125;,#&#123;upwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;top.sencom.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set uname=#&#123;uname&#125;,upwd=#&#123;upwd&#125; where uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">        delete from user where uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4、编写mybatisUtils工具类"><a href="#4、编写mybatisUtils工具类" class="headerlink" title="4、编写mybatisUtils工具类"></a>4、编写mybatisUtils工具类</h2><h3 id="4-1、首先编写recourses中的mybaits-config-xml配置文件"><a href="#4-1、首先编写recourses中的mybaits-config-xml配置文件" class="headerlink" title="4.1、首先编写recourses中的mybaits-config.xml配置文件"></a>4.1、首先编写recourses中的mybaits-config.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?</span></span></span><br><span class="line"><span class="tag"><span class="string">characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;top/sencom/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2、编写mybatisUtils"><a href="#4-2、编写mybatisUtils" class="headerlink" title="4.2、编写mybatisUtils"></a>4.2、编写mybatisUtils</h3><p>将mybatis的构建 SqlSessionFactory和从 SqlSessionFactory 中获取 SqlSession提取出来写到工具类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 获取sqlSessionFactory对象</span></span><br><span class="line">        String resource = <span class="string">&quot;mybaits-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、最后编写测试，测试一下效果"><a href="#5、最后编写测试，测试一下效果" class="headerlink" title="5、最后编写测试，测试一下效果"></a>5、最后编写测试，测试一下效果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> top.sencom.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> top.sencom.pojo.User;</span><br><span class="line"><span class="keyword">import</span> top.sencom.utils.mybatisUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatisOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = mybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询所有用户:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : mapper.getUserList()) &#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatisTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = mybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询所用户id为1的用户:&quot;</span>);</span><br><span class="line">        User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatisThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = mybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加一个新用户:&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">&quot;BG6FQO&quot;</span>,<span class="string">&quot;qwerty&quot;</span>);</span><br><span class="line">        mapper.insertUser(user);</span><br><span class="line">        sqlSession.commit();    <span class="comment">// !!! 增删改需要提交事务</span></span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatisFour</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = mybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户1的密码:&quot;</span>);</span><br><span class="line">        user.setUpwd(<span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">        mapper.updateUser(user);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatisFive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = mybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户通过id方式:&quot;</span>);</span><br><span class="line">        mapper.deleteUserById(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下第一个测试的运行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">User(uid=1, uname=BH6AOL, upwd=123456)</span><br><span class="line">User(uid=2, uname=BA1AA, upwd=654321)</span><br><span class="line">User(uid=3, uname=BA1BB, upwd=111111)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="常见问题-amp-amp-解决方法"><a href="#常见问题-amp-amp-解决方法" class="headerlink" title="常见问题&amp;&amp;解决方法"></a>常见问题&amp;&amp;解决方法</h2><blockquote>
<p>问题1</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Error querying database.  Cause: java.sql.SQLException: The server time zone value... ... ### The error may exist in top/sencom/dao/UserMapper.xml</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The error may involve top.sencom.dao.UserMapper.getUserList</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The error occurred while executing a query</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Cause: java.sql.SQLException: The server time zone value ... ...</span></span></span><br></pre></td></tr></table></figure>

<p>显然是mysql连接配置出了问题并且是时区的问题，我们只要在连接配置中指定一下时区就行了例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">serverTimezone=UTC</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题2</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Type interface top.sencom.dao.UserMapper is not known to the MapperRegistry.</span><br><span class="line"></span><br><span class="line">	at org.apache.ibatis.binding.MapperRegistry.getMapper(MapperRegistry.java:47)</span><br><span class="line">	at org.apache.ibatis.session.Configuration.getMapper(Configuration.java:845)</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.getMapper(DefaultSqlSession.java:291)</span><br><span class="line">	at mybatisTest.testMybatisOne(mybatisTest.java:12)</span><br><span class="line">	... ...</span><br></pre></td></tr></table></figure>

<p>显然是你的Mapper没有在mybaits-config.xml中注册，注册一下即可。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;top/sencom/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题3</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Error building SqlSession.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The error may exist in top/sencom/dao/UserMapper.xml</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource top/sencom/dao/UserMapper.xml</span></span></span><br><span class="line">	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)</span><br><span class="line">	at org.apache.ibatis.session.SqlSessionFactoryBuilder.build(SqlSessionFactoryBuilder.java:80)</span><br><span class="line">	at org.apache.ibatis.session.SqlSessionFactoryBuilder.build(SqlSessionFactoryBuilder.java:64)</span><br><span class="line">	at top.sencom.utils.mybatisUtils.&lt;clinit&gt;(mybatisUtils.java:19)</span><br><span class="line">	... 23 more</span><br></pre></td></tr></table></figure>

<p>这个错误是maven项目的一个坑点，maven 默认是不会导出src目录下的xml文件的，导致生成的target中没有我们的UserMapper.xml，我们要在pom.xml中手动配置一下build规则，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-Cluster</title>
    <url>/2019/11/27/Redis-Cluster/</url>
    <content><![CDATA[<p>暑假期间看了一部分Redis教程，但是没有看完，昨天晚上1.5倍加速从头看完了Redis入门教程。</p>
<p>感觉应该差不多了，今天就来在WSL上模拟一下集群的搭建吧！</p>
<h3 id="1-搭建流程"><a href="#1-搭建流程" class="headerlink" title="1 搭建流程"></a>1 搭建流程</h3><p>首先看一下我的redis位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;bin# ll</span><br><span class="line">total 40160</span><br><span class="line">drwxr-xr-x 1 root root    4096 Nov 27 00:51 .&#x2F;</span><br><span class="line">drwxr-xr-x 1 root root    4096 Nov 27 11:49 ..&#x2F;</span><br><span class="line">-rw-r--r-- 1 root root     349 Nov 26 23:25 dump.rdb</span><br><span class="line">-rwxr-xr-x 1 root root 4688472 Nov 26 18:37 redis-benchmark*</span><br><span class="line">-rwxr-xr-x 1 root root 8782336 Nov 26 18:37 redis-check-aof*</span><br><span class="line">-rwxr-xr-x 1 root root 8782336 Nov 26 18:37 redis-check-rdb*</span><br><span class="line">-rwxr-xr-x 1 root root 5216680 Nov 26 18:37 redis-cli*</span><br><span class="line">lrwxrwxrwx 1 root root      12 Nov 26 18:37 redis-sentinel -&gt; redis-server*</span><br><span class="line">-rwxr-xr-x 1 root root 8782336 Nov 26 18:37 redis-server*</span><br><span class="line">-rw-r--r-- 1 root root   61796 Nov 26 18:48 redis.conf</span><br></pre></td></tr></table></figure>

<p>1.1 创建Redis节点安装目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local#mkdir redis_cluster</span><br></pre></td></tr></table></figure>

<p>1.2 在redis_cluster目录下，创建7001-7006个文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster#mkdir 7001 7002 7003 7004 7005 7006</span><br></pre></td></tr></table></figure>

<p>1.3 并将redis.conf分别拷贝到7001-7006文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# cp ..&#x2F;bin&#x2F;redis.conf  .&#x2F;7001</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# cp ..&#x2F;bin&#x2F;redis.conf  .&#x2F;7002</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# cp ..&#x2F;bin&#x2F;redis.conf  .&#x2F;7003</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# cp ..&#x2F;bin&#x2F;redis.conf  .&#x2F;7004</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# cp ..&#x2F;bin&#x2F;redis.conf  .&#x2F;7005</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# cp ..&#x2F;bin&#x2F;redis.conf  .&#x2F;7006</span><br></pre></td></tr></table></figure>

<p>1.4 分别修改配置文件（这里举例7001节点，其他节点类比即可）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line">port 7001</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_7001.pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-7001.conf</span><br></pre></td></tr></table></figure>

<p>1.5 复制src到各个节点文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;home&#x2F;michael&#x2F;redis-5.0.7# cp -r src&#x2F; &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;7001</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;home&#x2F;michael&#x2F;redis-5.0.7# cp -r src&#x2F; &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;7002</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;home&#x2F;michael&#x2F;redis-5.0.7# cp -r src&#x2F; &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;7003</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;home&#x2F;michael&#x2F;redis-5.0.7# cp -r src&#x2F; &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;7004</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;home&#x2F;michael&#x2F;redis-5.0.7# cp -r src&#x2F; &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;7005</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;home&#x2F;michael&#x2F;redis-5.0.7# cp -r src&#x2F; &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;7006</span><br></pre></td></tr></table></figure>

<p>1.6 启动各个节点（这里只给出7001，其他节点类比即可）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# .&#x2F;7001&#x2F;src&#x2F;redis-server .&#x2F;7001&#x2F;redis.conf</span><br><span class="line">270:C 27 Nov 2019 12:17:22.135 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">270:C 27 Nov 2019 12:17:22.135 # Redis version&#x3D;5.0.7, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;270, just started       270:C 27 Nov 2019 12:17:22.135 # Configuration loaded</span><br></pre></td></tr></table></figure>

<p>完成六个节点启动后ps看一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# ps aux | grep redis</span><br><span class="line">michael    221  0.0  0.0  52352  2236 ?        Ssl  10:26   0:00 .&#x2F;redis-server *:6379</span><br><span class="line">root       271  0.0  0.0  52352  5084 ?        Ssl  12:17   0:00 .&#x2F;7001&#x2F;src&#x2F;redis-server *:7001 [cluster]</span><br><span class="line">root       276  0.0  0.0  52352  5084 ?        Ssl  12:18   0:00 .&#x2F;7002&#x2F;src&#x2F;redis-server *:7002 [cluster]</span><br><span class="line">root       281  0.0  0.0  52352  5092 ?        Ssl  12:18   0:00 .&#x2F;7003&#x2F;src&#x2F;redis-server *:7003 [cluster]</span><br><span class="line">root       293  0.0  0.0  55424  5112 ?        Ssl  12:19   0:00 .&#x2F;7004&#x2F;src&#x2F;redis-server *:7004 [cluster]</span><br><span class="line">root       298  0.0  0.0  52352  5084 ?        Ssl  12:19   0:00 .&#x2F;7005&#x2F;src&#x2F;redis-server *:7005 [cluster]</span><br><span class="line">root       303  0.0  0.0  52352  5088 ?        Ssl  12:19   0:00 .&#x2F;7006&#x2F;src&#x2F;redis-server *:7006 [cluster]</span><br><span class="line">root       315  0.0  0.0  14804  1196 pts&#x2F;0    S    12:20   0:00 grep --color&#x3D;auto redis</span><br></pre></td></tr></table></figure>

<p>1.7 复制redis-trib.rb到/usr/local/bin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;home&#x2F;michael&#x2F;redis-5.0.7&#x2F;src# cp redis-trib.rb &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>

<p>1.8 启动集群</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;bin# redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;env: ‘ruby’: No such file or directory</span><br></pre></td></tr></table></figure>

<p>报错没有ruby，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;bin# apt install ruby</span><br></pre></td></tr></table></figure>

<p>1.9 看来我看的教材老了唉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;bin# redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006</span><br><span class="line">WARNING: redis-trib.rb is not longer available!</span><br><span class="line">You should use redis-cli instead.</span><br><span class="line"></span><br><span class="line">All commands and features belonging to redis-trib.rb have been moved</span><br><span class="line">to redis-cli.</span><br><span class="line">In order to use them you should call redis-cli with the --cluster</span><br><span class="line">option followed by the subcommand name, arguments and options.</span><br><span class="line"></span><br><span class="line">Use the following syntax:</span><br><span class="line">redis-cli --cluster SUBCOMMAND [ARGUMENTS] [OPTIONS]</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">To get help about all subcommands, type:</span><br><span class="line">redis-cli --cluster help</span><br></pre></td></tr></table></figure>

<p>1.10 按提示来吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;bin# redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 -a 123456</span><br><span class="line">Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 127.0.0.1:7005 to 127.0.0.1:7001</span><br><span class="line">Adding replica 127.0.0.1:7006 to 127.0.0.1:7002</span><br><span class="line">Adding replica 127.0.0.1:7004 to 127.0.0.1:7003</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span><br><span class="line">[WARNING] Some slaves are in the same host as their master</span><br><span class="line">M: 081843660c373d95c6c69794da0bca23e3ef7a2a 127.0.0.1:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: d5d90d62310d8dbfa384e8bea4d0a1b3ae14035b 127.0.0.1:7002</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 42cf5706c29e387d79597ee954bfdf31e43b1bfc 127.0.0.1:7003</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 168711e677c7b6adef17e4779850f3387f86c41c 127.0.0.1:7004</span><br><span class="line">   replicates 42cf5706c29e387d79597ee954bfdf31e43b1bfc</span><br><span class="line">S: d04c5ecc5e79777afd32fe4fb33ddb82c938bc1c 127.0.0.1:7005</span><br><span class="line">   replicates 081843660c373d95c6c69794da0bca23e3ef7a2a</span><br><span class="line">S: bfbc2a40cc4fccf4c9f9727391d574e435c8cc05 127.0.0.1:7006</span><br><span class="line">   replicates d5d90d62310d8dbfa384e8bea4d0a1b3ae14035b</span><br><span class="line">Can I set the above configuration? (type &#39;yes&#39; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7001)</span><br><span class="line">M: 081843660c373d95c6c69794da0bca23e3ef7a2a 127.0.0.1:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: d5d90d62310d8dbfa384e8bea4d0a1b3ae14035b 127.0.0.1:7002</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 42cf5706c29e387d79597ee954bfdf31e43b1bfc 127.0.0.1:7003</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: bfbc2a40cc4fccf4c9f9727391d574e435c8cc05 127.0.0.1:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates d5d90d62310d8dbfa384e8bea4d0a1b3ae14035b</span><br><span class="line">S: 168711e677c7b6adef17e4779850f3387f86c41c 127.0.0.1:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 42cf5706c29e387d79597ee954bfdf31e43b1bfc</span><br><span class="line">S: d04c5ecc5e79777afd32fe4fb33ddb82c938bc1c 127.0.0.1:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 081843660c373d95c6c69794da0bca23e3ef7a2a</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;bin#</span><br></pre></td></tr></table></figure>

<p>成了？？？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-JUOEVVQ:&#x2F;usr&#x2F;local&#x2F;redis_cluster# redis-cli -c -h 127.0.0.1 -p 7001 -a 123456</span><br><span class="line">Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:7001&gt; set foo bar</span><br><span class="line">-&gt; Redirected to slot [12182] located at 127.0.0.1:7003</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7003&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">127.0.0.1:7003&gt;</span><br></pre></td></tr></table></figure>

<p>这里要注意一下就是如果节点设置密码的话每个节点的配置文件还要修改一下下面的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">masterauth 123456</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure>

<p>这样集群的简单测试就完成了。接下来就是java代码测试一下连接集群</p>
<h3 id="2-Java连接测试"><a href="#2-Java连接测试" class="headerlink" title="2 Java连接测试"></a>2 Java连接测试</h3><p>这里遇到的主要问题就是jedisCluster.auth()用不了了</p>
<p>后来发现在构造里面有带密码的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JedisCluster</span><span class="params">(Set&lt;HostAndPort&gt; jedisClusterNode, <span class="keyword">int</span> connectionTimeout, <span class="keyword">int</span> soTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">int</span> maxAttempts, String password, <span class="keyword">final</span> GenericObjectPoolConfig poolConfig)</span> </span></span><br></pre></td></tr></table></figure>

<p>拿来试试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jedis Cluster Test Demo</span></span><br><span class="line"><span class="comment">     * Michael Jiang</span></span><br><span class="line"><span class="comment">     * 2019年11月27日 13点24分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testJedisCluser</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Set&lt;HostAndPort&gt; nodes = <span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.235.1&quot;</span>,<span class="number">7001</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.235.1&quot;</span>,<span class="number">7002</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.235.1&quot;</span>,<span class="number">7003</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.235.1&quot;</span>,<span class="number">7004</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.235.1&quot;</span>,<span class="number">7005</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.235.1&quot;</span>,<span class="number">7006</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为到目前jedis还不兹磁直接设置带密码的集群访问，所以需要使用poolconfig</span></span><br><span class="line">        JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line"></span><br><span class="line">        JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodes,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">100</span>,<span class="string">&quot;123456&quot;</span>,poolConfig);</span><br><span class="line"></span><br><span class="line">        String foo = jedisCluster.get(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(foo);</span><br><span class="line"></span><br><span class="line">        jedisCluster.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bar</span><br></pre></td></tr></table></figure>

<p>吼以了！</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Win7 企业版密钥和kms激活</title>
    <url>/2019/11/15/Win7-%E4%BC%81%E4%B8%9A%E7%89%88%E5%AF%86%E9%92%A5%E5%92%8Ckms%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h2 id="0、win7企业版激活密钥永久激活"><a href="#0、win7企业版激活密钥永久激活" class="headerlink" title="0、win7企业版激活密钥永久激活"></a>0、win7企业版激活密钥永久激活</h2><p>Windows 7 All Volume Editions Volume:MAK</p>
<p>Enterprise;EnterpriseN;EnterpriseE;Professional;ProfessionalN;ProfessionalE</p>
<p>[Key]：2KBDJ-V84CF-YWTPX-W726F-6CPJV</p>
<p>[Key]：34BCY-QMR8R-T779J-KFF4R-C28YF</p>
<p>[Key]：36MDV-B48XY-7F2VX-KH9FC-YDKDW</p>
<p>[Key]：38977-FFR38-X9FMX-WHXMQ-JF8WF</p>
<p>[Key]：3W6GX-GGYCQ-GQ3FC-PH92W-D8G3J</p>
<p>[Key]：3W6VK-BB6P4-GCV98-GQM6X-RD8MG</p>
<h2 id="1、windows7企业版产品密钥kms安装密钥"><a href="#1、windows7企业版产品密钥kms安装密钥" class="headerlink" title="1、windows7企业版产品密钥kms安装密钥"></a>1、windows7企业版产品密钥kms安装密钥</h2><p>Windows 7 Enterprise Volume:GVLK</p>
<p>Windows 7 企业版：33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</p>
<p>Windows 7 企业版 N：YDRBP-3D83W-TY26F-D46B2-XCKRJ</p>
<p>Windows 7 企业版 E：C29WB-22CC8-VJ326-GHFJW-H9DH4</p>
<p>注：win7 N版本和E版本是针对欧洲定制的，因为欧盟反垄断法的关系，欧洲版系统不包含Internet Explorer和Windows  Media Player，除此之外基本一样。其中N版不包含Windows Media Player，E版不包含Internet  Explorer。</p>
<p>2、打开命令提示符，依次执行下面的代码，分别表示：安装win7企业版密钥，设置kms服务器，激活win7企业版，查询激活期限，kms一般是180天，到期后再次激活。<a href="http://www.xitongcheng.com/jiaocheng/dnrj_article_44606.html">可用的</a><a href="http://www.xitongcheng.com/jiaocheng/dnrj_article_44606.html">kms</a><a href="http://www.xitongcheng.com/jiaocheng/dnrj_article_44606.html">激活服务器有哪些</a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slmgr &#x2F;ipk 33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</span><br><span class="line"></span><br><span class="line">slmgr &#x2F;skms zh.us.to</span><br><span class="line"></span><br><span class="line">slmgr &#x2F;ato</span><br><span class="line"></span><br><span class="line">slmgr &#x2F;xpr</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>raspberrypi zero wh 快速上手</title>
    <url>/2020/04/30/raspberrypi-zero-wh-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>今天中午收到了几天前闲鱼购买的RaspberryPi Zero WH 。花了八十元，由于Zero 的USB接口全部为micro usb，显示输出为micro hdmi，所以别指望连显示器和键盘操作了（其实是要多花钱买转接线）</p>
<h2 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h2><h3 id="2-1首先我们需要："><a href="#2-1首先我们需要：" class="headerlink" title="2.1首先我们需要："></a><strong>2.1首先我们需要：</strong></h3><ul>
<li>RaspberryPi Zero WH</li>
<li>USB数据线一根</li>
<li>microSD卡一张</li>
<li>Linux操作系统的计算机一台（虚拟机也阔以）</li>
</ul>
<h3 id="2-2官网下载系统镜像"><a href="#2-2官网下载系统镜像" class="headerlink" title="2.2官网下载系统镜像"></a><strong>2.2官网下载系统镜像</strong></h3><p><a href="https://www.raspberrypi.org/downloads/raspbian/%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E9%80%89">https://www.raspberrypi.org/downloads/raspbian/这里我们选</a> Raspbian Buster  Lite，因为我不需要图形界面和其他推荐的软件，直接用最小系统是最好。但时间来到了2020.4.30号，使用官网最新的镜像已经不能通过配置文件的方式设置WIFI和ssh了，所以我们得下载旧的镜像，于是我对官网镜像下载地址进行了一波分析，发现<a href="https://downloads.raspberrypi.org/raspbian_lite_latest%E5%8D%95%E5%87%BB%E6%AD%A4%E7%BD%91%E5%9D%80%E5%B0%B1%E7%9B%B4%E6%8E%A5%E9%BB%98%E8%AE%A4%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84%E9%95%9C%E5%83%8F%E4%BA%86%EF%BC%8C%E4%BA%8E%E6%98%AF%E6%88%91%E5%87%AD%E5%80%9F%E7%9B%B4%E8%A7%89%E5%B0%86%E5%85%B6%E4%BF%AE%E6%94%B9%E6%88%90http://downloads.raspberrypi.org/raspbian_lite/">https://downloads.raspberrypi.org/raspbian_lite_latest单击此网址就直接默认下载最新的镜像了，于是我凭借直觉将其修改成http://downloads.raspberrypi.org/raspbian_lite/</a> NICE! 顺着点下去就找到了我知道的能够实现一根线配置的系统镜像<a href="http://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2019-09-30/2019-09-26-raspbian-buster-lite.zip%E5%B0%86%E5%85%B6%E4%B8%8B%E8%BD%BD%E4%B8%8B%E6%9D%A5%E3%80%82%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%98%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84">http://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2019-09-30/2019-09-26-raspbian-buster-lite.zip将其下载下来。使用树莓派官方提供的</a> <strong>Raspberry Pi Imager</strong> 将刚刚下载的2019-09-26-raspbian-buster-lite.zip烧录到microSD卡中。</p>
<h3 id="2-3修改配置文件"><a href="#2-3修改配置文件" class="headerlink" title="2.3修改配置文件"></a><strong>2.3修改配置文件</strong></h3><p>使用Linux环境读取刚刚写好的MicroSD卡</p>
<p>2.3.1修改/etc/wpa_supplicant/wpa_supplicant.conf</p>
<p>追加以下wifi连接内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">network=&#123;</span><br><span class="line">    ssid=<span class="string">&quot;WiFi-Name&quot;</span> //wifi名称</span><br><span class="line">    psk=<span class="string">&quot;WiFi-password&quot;</span> //wifi密码</span><br><span class="line">    key_mgmt=WPA-PSK //加密方式</span><br><span class="line">    priority=1 //连接优先级，数字越大优先级越高（不可以是负数）</span><br><span class="line">    scan_ssid=1 //连接隐藏WiFi时需要指定该值为1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.3.2在boot分区下新建一个名为ssh的文件</p>
<p>至此完成配置，将microSD卡插入zero然后加电等待zero自动连接到路由器（此时我们可以在路由器里获取到zero分配到的IP地址）</p>
<h2 id="3-基本优化"><a href="#3-基本优化" class="headerlink" title="3.基本优化"></a>3.基本优化</h2><h3 id="3-1通过ssh连接到我们的zero"><a href="#3-1通过ssh连接到我们的zero" class="headerlink" title="3.1通过ssh连接到我们的zero"></a><strong>3.1通过ssh连接到我们的zero</strong></h3><p>用户名:pi</p>
<p>密码:raspberry</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https:&#x2F;&#x2F;aka.ms&#x2F;pscore6</span><br><span class="line"></span><br><span class="line">PS C:\Users\michael&gt; ssh pi@192.168.1.11</span><br><span class="line">The authenticity of host &#39;192.168.1.11 (192.168.1.11)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:K7DB&#x2F;YjDroeIte87wQw&#x2F;c7O5PAamLJiKVpIk292j6DQ.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;192.168.1.11&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">pi@192.168.1.11&#39;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">pi@192.168.1.11&#39;s password:</span><br><span class="line">Linux raspberrypi 4.19.75+ #1270 Tue Sep 24 18:38:54 BST 2019 armv6l</span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU&#x2F;Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU&#x2F;Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line"></span><br><span class="line">SSH is enabled and the default password for the &#39;pi&#39; user has not been changed.</span><br><span class="line">This is a security risk - please login as the &#39;pi&#39; user and type &#39;passwd&#39; to set a new password.</span><br><span class="line"></span><br><span class="line">pi@raspberrypi:~ $ </span><br></pre></td></tr></table></figure>

<p>使用<code>sudo raspi-config</code>命令可配置密码、时区等。</p>
<h3 id="3-2更换源"><a href="#3-2更换源" class="headerlink" title="3.2更换源"></a><strong>3.2更换源</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/apt/</span><br><span class="line">cat sources.list</span><br><span class="line">sudo cp sources.list sources.list.bak</span><br><span class="line">sudo sed -i &#x27;s|raspbian.raspberrypi.org|mirrors.ustc.edu.cn/raspbian|g&#x27; /etc/apt/sources.list</span><br><span class="line">cat sources.list</span><br><span class="line">cd sources.list.d/</span><br><span class="line">cat raspi.list </span><br><span class="line">sudo cp raspi.list raspi.list.bak</span><br><span class="line">sudo sed -i &#x27;s|//archive.raspberrypi.org|//mirrors.ustc.edu.cn/archive.raspberrypi.org|g&#x27; /etc/apt/sources.list.d/raspi.list</span><br><span class="line">cat raspi.list </span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<p>更新一下系统</p>
<h3 id="3-3解锁root用户"><a href="#3-3解锁root用户" class="headerlink" title="3.3解锁root用户"></a><strong>3.3解锁root用户</strong></h3><p>先使用<code>sudo passwd root</code>命令为root用户创建密码</p>
<p>使用<code>sudo passwd --unlock root</code>命令解锁root账户</p>
<p>===========================================</p>
<p>访问<a href="http://home.sencom.top:8080/">http://home.sencom.top:8080/</a> 进入由树莓派zero搭建的home web server</p>
]]></content>
      <tags>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title>yum update 报错</title>
    <url>/2021/04/14/yum-update-%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>使用<code>yum update</code>更新时突然出现一个奇怪的问题，记录一下解决方法。</p>
<h2 id="0、错误内容："><a href="#0、错误内容：" class="headerlink" title="0、错误内容："></a>0、错误内容：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_2_centos ~]# yum  update</span><br><span class="line">error: rpmdb: BDB0113 Thread&#x2F;process 14918&#x2F;139641861982272 failed: BDB1507 Thread died in Berkeley DB library</span><br><span class="line">error: db5 error(-30973) from dbenv-&gt;failchk: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery</span><br><span class="line">error: cannot open Packages index using db5 -  (-30973)</span><br><span class="line">error: cannot open Packages database in &#x2F;var&#x2F;lib&#x2F;rpm</span><br><span class="line">CRITICAL:yum.main:</span><br><span class="line"></span><br><span class="line">Error: rpmdb open failed</span><br></pre></td></tr></table></figure>



<h2 id="1、解决方法"><a href="#1、解决方法" class="headerlink" title="1、解决方法"></a>1、解决方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_2_centos ~]# cd &#x2F;var&#x2F;lib&#x2F;rpm</span><br><span class="line">[root@VM_0_2_centos rpm]# ls</span><br><span class="line">Basenames     __db.001  __db.003  Group       Name          Packages     Requirename  Sigmd5</span><br><span class="line">Conflictname  __db.002  Dirnames  Installtid  Obsoletename  Providename  Sha1header   Triggername</span><br><span class="line">[root@VM_0_2_centos rpm]# rm -rf __db*</span><br><span class="line">[root@VM_0_2_centos rpm]# rpm --rebuilddb</span><br><span class="line">[root@VM_0_2_centos rpm]# yum update</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>error</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程之生产者消费者问题</title>
    <url>/2020/08/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>使用Linux平台的pthread库进行多线程编程实现生产者消费者问题。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P sem_wait</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V sem_post</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sem_t</span> empty;</span><br><span class="line"><span class="keyword">sem_t</span> full;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">provider</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        P(&amp;empty);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        val++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;provider: provide one good!/now have %d\n&quot;</span>,val);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        V(&amp;full);</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        P(&amp;full);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        val--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;consumer: consume one good!/now have %d\n&quot;</span>,val);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        V(&amp;empty);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_init(&amp;mutex,<span class="literal">NULL</span>);</span><br><span class="line">    sem_init(&amp;empty,<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">    sem_init(&amp;full,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line">    <span class="keyword">pthread_t</span> t2;</span><br><span class="line">    pthread_create(&amp;t1,<span class="literal">NULL</span>,provider,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;t1,<span class="literal">NULL</span>,consumer,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t1,<span class="literal">NULL</span>);  <span class="comment">// wiat t1 end</span></span><br><span class="line">    pthread_join(t2,<span class="literal">NULL</span>);  <span class="comment">// wait t2 end</span></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>定义了两个信号量full，empty和一个互斥变量mutex。其中full和empty用于实现同步，mutex用于实现互斥访问val进行存取（即改变val的值）。</p>
<p>由main方法中的**sem_init(&amp;empty,0,20)**可以看出val的取值范围为[0-20],程序开始时初始化val值为0，full为0，empty为20。然后起t1，t2两个线程分别为生产者和消费者线程。</p>
<ul>
<li>生产者线程主要是先申请（P)一个empty的空间然后互斥访问val进行生产（即val++）生产完成后释放（V）full表示val中已经有一个生产完成的资源了。</li>
<li>消费者线程主要是先申请（P)一个full的空间然后互斥访问val进行消费（即val–）消费完成后释放（V）empty表示val中已经有一个资源被消费了。</li>
</ul>
<p>由于消费者线程中sleep(3);而生产者线程中为slee(1);</p>
<p>所以执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">michael@DESKTOP-6N96H5I:&#x2F;mnt&#x2F;e&#x2F;test$ gcc threadTest.c -lpthread &amp;&amp; .&#x2F;a.out</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">consumer: consume one good!&#x2F;now have 0</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">consumer: consume one good!&#x2F;now have 0</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">consumer: consume one good!&#x2F;now have 0</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">consumer: consume one good!&#x2F;now have 0</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">consumer: consume one good!&#x2F;now have 0</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">consumer: consume one good!&#x2F;now have 0</span><br></pre></td></tr></table></figure>

<p>如果将其对调即消费者线程中sleep(1);而生产者线程中为slee(3);则执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">michael@DESKTOP-6N96H5I:&#x2F;mnt&#x2F;e&#x2F;test$ gcc threadTest.c -lpthread &amp;&amp; .&#x2F;a.out</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">consumer: consume one good!&#x2F;now have 0</span><br><span class="line">provider: provide one good!&#x2F;now have 1</span><br><span class="line">provider: provide one good!&#x2F;now have 2</span><br><span class="line">consumer: consume one good!&#x2F;now have 1</span><br><span class="line">provider: provide one good!&#x2F;now have 2</span><br><span class="line">provider: provide one good!&#x2F;now have 3</span><br><span class="line">provider: provide one good!&#x2F;now have 4</span><br><span class="line">consumer: consume one good!&#x2F;now have 3</span><br><span class="line">provider: provide one good!&#x2F;now have 4</span><br><span class="line">provider: provide one good!&#x2F;now have 5</span><br><span class="line">provider: provide one good!&#x2F;now have 6</span><br><span class="line">consumer: consume one good!&#x2F;now have 5</span><br><span class="line">provider: provide one good!&#x2F;now have 6</span><br><span class="line">provider: provide one good!&#x2F;now have 7</span><br><span class="line">provider: provide one good!&#x2F;now have 8</span><br><span class="line">consumer: consume one good!&#x2F;now have 7</span><br><span class="line">provider: provide one good!&#x2F;now have 8</span><br><span class="line">provider: provide one good!&#x2F;now have 9</span><br><span class="line">provider: provide one good!&#x2F;now have 10</span><br><span class="line">consumer: consume one good!&#x2F;now have 9</span><br><span class="line">provider: provide one good!&#x2F;now have 10</span><br><span class="line">provider: provide one good!&#x2F;now have 11</span><br><span class="line">provider: provide one good!&#x2F;now have 12</span><br><span class="line">consumer: consume one good!&#x2F;now have 11</span><br><span class="line">provider: provide one good!&#x2F;now have 12</span><br><span class="line">provider: provide one good!&#x2F;now have 13</span><br><span class="line">provider: provide one good!&#x2F;now have 14</span><br><span class="line">consumer: consume one good!&#x2F;now have 13</span><br><span class="line">provider: provide one good!&#x2F;now have 14</span><br><span class="line">provider: provide one good!&#x2F;now have 15</span><br><span class="line">provider: provide one good!&#x2F;now have 16</span><br><span class="line">consumer: consume one good!&#x2F;now have 15</span><br><span class="line">provider: provide one good!&#x2F;now have 16</span><br><span class="line">provider: provide one good!&#x2F;now have 17</span><br><span class="line">provider: provide one good!&#x2F;now have 18</span><br><span class="line">consumer: consume one good!&#x2F;now have 17</span><br><span class="line">provider: provide one good!&#x2F;now have 18</span><br><span class="line">provider: provide one good!&#x2F;now have 19</span><br><span class="line">provider: provide one good!&#x2F;now have 20</span><br><span class="line">consumer: consume one good!&#x2F;now have 19</span><br><span class="line">provider: provide one good!&#x2F;now have 20</span><br><span class="line">consumer: consume one good!&#x2F;now have 19</span><br><span class="line">provider: provide one good!&#x2F;now have 20</span><br></pre></td></tr></table></figure>

<p>P.s.其实mutex也可以用semphore来定义即</p>
<p>sem_t mutex;</p>
<p>sem_init(&amp;mutex,0,1);</p>
<p>这样PV操作更加统一！</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>微信自动接听助手-WeChatAutoAnswer</title>
    <url>/2020/05/03/%E5%BE%AE%E4%BF%A1%E8%87%AA%E5%8A%A8%E6%8E%A5%E5%90%AC%E5%8A%A9%E6%89%8B-WeChatAutoAnswer/</url>
    <content><![CDATA[<p>因为以前使用的自动接听助手长期不更新已经不适配最新的微信版本（7.0.13）了。怨人不如自怨，求诸人不如求之己，所以决定自己来写一个微信自动接听助手。于是就有了今天的<strong>WeChatAutoAnswer ！</strong></p>
<p><strong>–&gt;<a href="http://docs.sencom.top/wechatautoanswer/">使用手冊和下載地址</a>&lt;–</strong></p>
<p>那么就来看一下实(踩)现(坑)过程：首先我们学习一下AccessibilityService(使用搜索引擎就能找到许多入门教程)，这里我就不多赘述了。简单说就是通过AccessibilityService这个功能实现对微信应用的监听如果发现有视频通话请求就模拟点击接通即可。</p>
<p>1.1首先在manifest中注册一个service</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;.WeChatAccessibilityService&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:permission</span>=<span class="string">&quot;android.permission.BIND_ACCESSIBILITY_SERVICE&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:process</span>=<span class="string">&quot;:BackgroundService&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.accessibilityservice.AccessibilityService&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            &lt;meta-data</span><br><span class="line">                android:name=&quot;android.accessibilityservice&quot;</span><br><span class="line">                android:resource=&quot;@xml/accessible_service_config_ali&quot; /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件:xml/accessible_service_config_ali.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">accessibility-service</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accessibilityEventTypes</span>=<span class="string">&quot;typeWindowStateChanged|typeWindowContentChanged|typeNotificationStateChanged&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accessibilityFeedbackType</span>=<span class="string">&quot;feedbackGeneric&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accessibilityFlags</span>=<span class="string">&quot;flagReportViewIds|flagRetrieveInteractiveWindows&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:canRetrieveWindowContent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:notificationTimeout</span>=<span class="string">&quot;64&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:description</span>=<span class="string">&quot;@string/desc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:canPerformGestures</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:packageNames</span>=<span class="string">&quot;com.tencent.mm&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.2然后写一个类继承AccessibilityService即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.wechatautoanswer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.accessibilityservice.AccessibilityService;</span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.accessibility.AccessibilityEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.accessibility.AccessibilityNodeInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatAccessibilityService</span> <span class="keyword">extends</span> <span class="title">AccessibilityService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;WeChatAccessibilityService&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;LongLogTag&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccessibilityEvent</span><span class="params">(AccessibilityEvent event)</span> </span>&#123;</span><br><span class="line">        String pkgName = event.getPackageName().toString();</span><br><span class="line">        <span class="keyword">int</span> eventType = event.getEventType();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onAccessibilityEvent:event:&quot;</span>+eventType);</span><br><span class="line">        <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">            <span class="keyword">case</span> AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:</span><br><span class="line">                 <span class="keyword">try</span>&#123;</span><br><span class="line">                    AccessibilityNodeInfo info = event.getSource();</span><br><span class="line">                    String className = event.getClassName().toString();</span><br><span class="line">                    <span class="keyword">if</span>(className.equals(<span class="string">&quot;com.tencent.mm.plugin.voip.ui.VideoActivity&quot;</span>))&#123;</span><br><span class="line">                        autoAnswer();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Log.d(TAG,<span class="string">&quot;CLASSNAME:&quot;</span>+ className);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception exx)&#123;</span><br><span class="line">                    exx.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;LongLogTag&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">autoAnswer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AccessibilityNodeInfo nodeInfo = getRootInActiveWindow();</span><br><span class="line">        <span class="keyword">if</span> (nodeInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> child = nodeInfo.getChildCount();</span><br><span class="line">            <span class="comment">// iterate through all child of parent view</span></span><br><span class="line">            <span class="keyword">int</span> imCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;child; i++)&#123;</span><br><span class="line">                AccessibilityNodeInfo childNodeView = nodeInfo.getChild(i);</span><br><span class="line">                <span class="keyword">if</span>(childNodeView.getClassName().toString().equals(<span class="string">&quot;android.widget.ImageView&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (imCount == <span class="number">0</span> || imCount ==<span class="number">1</span>)&#123;</span><br><span class="line">                        imCount++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    childNodeView.performAction(AccessibilityNodeInfo.ACTION_CLICK);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;childNodeView:&quot;</span>+childNodeView.getClassName());</span><br><span class="line">                <span class="comment">// Do something with this window content</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们在监听器里面监听AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED如果有窗口状态改变且切换到</p>
<p>com.tencent.mm.plugin.voip.ui.VideoActivity(怎么得到这个类名的？这里我通过adb命令查看当前显示的activity获得的)这个Acitvity时我们就可以调用 autoAnswer();方法然后在里面找到接听按钮点下去就OK</p>
<p><img src="/images/20200503223520-166x300.png" alt="img">光看autoAnswer()你可能会一头雾水，这里我制作了一个截图。通过代码可以看出我遍历整个子控件然后模拟点击了第三个android.widget.ImageView。那么为什么是第三个？我主要使用Log打印日志一个一个试出来的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">转语音childNodeView:android.widget.ImageView</span><br><span class="line">childNodeView:android.widget.TextView</span><br><span class="line">挂断childNodeView:android.widget.ImageView</span><br><span class="line">childNodeView:android.widget.TextView</span><br><span class="line">接听childNodeView:android.widget.ImageView</span><br><span class="line">childNodeView:android.widget.TextView</span><br><span class="line">缩小childNodeView:android.widget.Button</span><br><span class="line">childNodeView:android.widget.TextView</span><br></pre></td></tr></table></figure>

<p>通过对日志的分析，找出了第一个imageview是图中的绿色区域控件即转语音；第二个imageview是黄色区域的挂断，第三个imageview那个就是我们所需要的接听控件。这里为什么要自找控件位置主要是用uiautomatorviewer和DDMS 都不能分析上图界面的布局（报错）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error obtaining UI hierarchy</span><br><span class="line">Error while obtaining UI hierarchy XML file: com.android.ddmlib.SyncException: Remote object doesn&#39;t exist!</span><br></pre></td></tr></table></figure>

<p>下载地址:</p>
<p>1.<a href="http://home.sencom.top:8080/apps/WeChatAutoAnswer-2020-05-03.apk">http://home.sencom.top:8080/apps/WeChatAutoAnswer-2020-05-03.apk</a></p>
<p>2.<a href="https://pan.baidu.com/s/1hcuOCx6CILIe70NPDornxg">https://pan.baidu.com/s/1hcuOCx6CILIe70NPDornxg</a> 提取码：tc15</p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>自制滚动歌词效果</title>
    <url>/2020/04/21/%E8%87%AA%E5%88%B6%E6%BB%9A%E5%8A%A8%E6%AD%8C%E8%AF%8D%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>最近一直在完善jayPlayer（自制杰伦播放器）当然不仅仅可以播放杰伦的歌曲，其他歌手也有哈。这次添加的是歌词滚动显示效果。废话不多说先上效果图：</p>
<p><img src="/images/S00421-22441842-495x1024.png" alt="img"></p>
<p>这个界面看上去还是阔以的，特别赞一下咪咕音乐的曲库，这首<strong>革命人永远是年轻</strong>  是我听过的最好的一版！远看这个布局也不怎么看出是如何实现的大概猜一个TextView？是的，就是TextView，每行歌词都是一个TextView，所有TextView都塞在一个ListView中，下面是我的布局文件：activity_play_lrc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/play_lrc_frame&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;450dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@id/seek_bar_grid&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/nav_bar_grid&quot;</span>&gt;</span></span><br><span class="line">    &lt;ScrollView</span><br><span class="line">        android:id=&quot;@+id/play_lrc_scroll&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:fillViewport=&quot;true&quot;</span><br><span class="line">        android:padding=&quot;5dp&quot;</span><br><span class="line">        android:scrollbars=&quot;none&quot;&gt;</span><br><span class="line">        &lt;ListView</span><br><span class="line">            android:scrollbars=&quot;none&quot;</span><br><span class="line">            android:id=&quot;@+id/play_lrc_listview&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:divider=&quot;#00000000&quot;</span><br><span class="line">            /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和自定义适配器是一个思路，就是重新一个适配器LrcAdapter继承自BaseAdapter,并实现几个方法即可。再看一个布局文件就是ListView中每个人Item的布局，这里就简单点，是个TextView。</p>
<p>show_lrc_item.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    android:id=&quot;@+id/show_lrc_item&quot;</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/play_lrc_view&quot;</span><br><span class="line">        android:textColor=&quot;#333333&quot;</span><br><span class="line">        android:textSize=&quot;20sp&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:text=&quot;Hello this lrc yo~&quot;</span><br><span class="line">        android:textAlignment=&quot;center&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后再写适配器LrcAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.jayplayer.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.SparseBooleanArray;</span><br><span class="line"><span class="keyword">import</span> android.util.TypedValue;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sencom.jayplayer.R;</span><br><span class="line"><span class="keyword">import</span> top.sencom.jayplayer.lrcparser.parser.Sentence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LrcAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Sentence&gt; data;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater layoutInflater;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> SparseBooleanArray selected;</span><br><span class="line">    <span class="keyword">int</span> old = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LrcAdapter</span><span class="params">( Context context, List&lt;Sentence&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.selected = <span class="keyword">new</span> SparseBooleanArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        convertView = layoutInflater.inflate(R.layout.show_lrc_item, <span class="keyword">null</span>);</span><br><span class="line">        TextView lrcLine = convertView.findViewById(R.id.play_lrc_view);</span><br><span class="line">        lrcLine.setText(data.get(position).getContent());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(selected.get(position))&#123;</span><br><span class="line">            lrcLine.setTextColor(context.getResources().getColor(R.color.colorPrimary));</span><br><span class="line">            lrcLine.setTextSize(TypedValue.COMPLEX_UNIT_SP,<span class="number">25</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            lrcLine.setTextColor(context.getResources().getColor(R.color.lrcDefault));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelectedItem</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(old!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.selected.put(old,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.selected.put(position,<span class="keyword">true</span>);</span><br><span class="line">        old = position;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们设置了一个SparseBooleanArray  用来存放当前选中的Item的标志；用于实现当前播放行的字体加大和上色，相关方法是getView()和setSelectedItem()，old变量用来记忆上一个被选中的Item用于恢复。其实也可以不用因为都是顺序的完全可以通过-1得到。注意这里的数据data变量的类型是List<Sentence>，这里我的歌词解析用的是github上的<a href="https://github.com/authorfu/LrcParser%E4%BD%86%E6%98%AF%E4%BB%96%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9C%89%E4%B8%AA%E5%B0%8Fbug%EF%BC%8C%E6%97%A9%E5%9C%A8%E6%88%91%E5%86%99%E5%9F%BA%E4%BA%8Ejava">https://github.com/authorfu/LrcParser但是他的代码有个小bug，早在我写基于java</a> swing GUI开发的音乐播放器时候就发现并解决了，所以这次直接改了就用就行了。</p>
<p>接下来就是activity中的核心代码了，当然之前应该已经将歌词lrc文件获取到，并将其存放在reader变量中。下面给出lrc显示线程的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lrcT =  <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    lyric= LrcParser.create(reader);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">256</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Sentence sentence=lyric.findSentence(mediaPlayer.getCurrentPosition());</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span>(sentence.getIndex() == lyric.getSize() || lrcExit)&#123;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="comment">//System.out.println(sentence);</span></span><br><span class="line">                           runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                               <span class="meta">@Override</span></span><br><span class="line">                               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                   lrcListView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                       <span class="meta">@Override</span></span><br><span class="line">                                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                           lrcAdapter.setSelectedItem(sentence.getIndex());</span><br><span class="line">                                           lrcAdapter.notifyDataSetChanged();</span><br><span class="line">                                           lrcListView.setSelectionFromTop(sentence.getIndex(),<span class="number">550</span>);</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125;);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>在歌词准备好，listview添加好适配器后就可以启动这个线程，其中核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                               <span class="meta">@Override</span></span><br><span class="line">                               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                   lrcListView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                       <span class="meta">@Override</span></span><br><span class="line">                                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                           lrcAdapter.setSelectedItem(sentence.getIndex());</span><br><span class="line">                                           lrcAdapter.notifyDataSetChanged();</span><br><span class="line">                                           lrcListView.setSelectionFromTop(sentence.getIndex(),<span class="number">550</span>);</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125;);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br></pre></td></tr></table></figure>

<p>每次执行此方法时首先将选中的Item调整为当前播放的歌曲所匹配的歌词，然后通知listview数据集有改动这样listview就会重新绘制布局执行getView方法将旧的歌词恢复，新的歌词变大上色，最后执行listview选中方法将当前位置的歌词滚动到屏幕相对中间的地方，至此完成一行歌词显示。</p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义ListView适配器</title>
    <url>/2020/04/18/%E8%87%AA%E5%AE%9A%E4%B9%89ListView%E9%80%82%E9%85%8D%E5%99%A8/</url>
    <content><![CDATA[<p>最近想写一个音乐播放器作为安卓课程验收作业；于是拿起早些时候写的一个jayPlayer准备魔改一下，这个App使用的音乐资源来自Github上<a href="https://github.com/jsososo/MiguMusicApi%E7%94%A8%E7%9A%84%E6%98%AF%E5%92%AA%E5%92%95%E9%9F%B3%E4%B9%90%E7%9A%84API%EF%BC%8C%E6%89%80%E4%BB%A5%E5%8F%AF%E4%BB%A5%E6%92%AD%E6%94%BE%E6%9D%B0%E4%BC%A6%E7%9A%84%E6%AD%8C%E3%80%82">https://github.com/jsososo/MiguMusicApi用的是咪咕音乐的API，所以可以播放杰伦的歌。</a></p>
<p>书归正传，先看效果图</p>
<p><img src="/images/20200418221640.png" alt="img"></p>
<p>如图所示，每个搜索结果为一行大字和一行小字。其中大字是歌曲名；小字是歌手和专辑名。这种简单的两行显示其实安卓自身就有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android.R.layout.simple_list_item_2</span><br></pre></td></tr></table></figure>

<p>这个布局就是显示两个的。但是如果还要显示一张图片就不行了，由此引入本次主题，既然你能造这个我也能模仿造一个出来。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;ScrollView</span><br><span class="line">            android:id=&quot;@+id/scrollView&quot;</span><br><span class="line">            app:layout_constraintTop_toBottomOf=&quot;@+id/grid&quot;</span><br><span class="line">            app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:fillViewport=&quot;true&quot;</span><br><span class="line">            android:scrollbars=&quot;vertical&quot;&gt;</span><br><span class="line">                &lt;ListView</span><br><span class="line">                    android:id=&quot;@+id/listview&quot;</span><br><span class="line">                    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">                    /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是下方搜索结果的布局文件，其中我们定义了一个listview.</p>
<p>下面是重写适配器部分，先看一下用到的ShowItem类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.jayplayer.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String albumName;</span><br><span class="line">    <span class="keyword">private</span> String artistName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShowItem</span><span class="params">(String name, String albumName, String artistName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.albumName = albumName;</span><br><span class="line">        <span class="keyword">this</span>.artistName = artistName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAlbumName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> albumName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlbumName</span><span class="params">(String albumName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.albumName = albumName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getArtistName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> artistName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArtistName</span><span class="params">(String artistName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.artistName = artistName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  name + <span class="string">&#x27;\n&#x27;</span> + albumName + <span class="string">&#x27;/&#x27;</span> + artistName ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.jayplayer.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sencom.jayplayer.R;</span><br><span class="line"><span class="keyword">import</span> top.sencom.jayplayer.model.ShowItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResultAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ShowItem&gt; data;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater layoutInflater;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResultAdapter</span><span class="params">(Context context, List&lt;ShowItem&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> TextView fristLine;</span><br><span class="line">        <span class="keyword">public</span> TextView secondLine;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        Info info = <span class="keyword">new</span> Info();</span><br><span class="line">        convertView = layoutInflater.inflate(R.layout.show_each_item, <span class="keyword">null</span>);</span><br><span class="line">        info.fristLine = convertView.findViewById(R.id.first_line);</span><br><span class="line">        info.secondLine = convertView.findViewById(R.id.second_line);</span><br><span class="line"></span><br><span class="line">        info.fristLine.setText(data.get(position).getName());</span><br><span class="line">        info.secondLine.setText(data.get(position).getArtistName()+<span class="string">&quot;-&quot;</span>+data.get(position).getAlbumName());</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面自定义适配器核心代码就是getView方法的重写，大概过程就是从R.layout.show_each_item布局文件中加载View，然后为其中的控件赋值，最后返回这个自定义View。</p>
<p>下面是R.layout.show_each_item布局文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    android:id=<span class="string">&quot;@+id/show_each_item&quot;</span></span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;GridLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">        android:rowCount=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_marginLeft=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">            android:id=<span class="string">&quot;@+id/first_line&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;23dp&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;SongName&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;#444&quot;</span></span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_marginLeft=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">            android:id=<span class="string">&quot;@+id/second_line&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;Arits-Album&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span>/&gt;</span><br><span class="line">    &lt;/GridLayout&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>最后我们在Activity中编写如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listView = findViewById(R.id.listview);</span><br><span class="line">List&lt;ShowItem&gt; showItem = <span class="keyword">new</span> ArrayList&lt;ShowItem&gt;();</span><br><span class="line"><span class="comment">// 赋值showItem</span></span><br><span class="line">SearchResultAdapter searchResultAdapter = <span class="keyword">new</span> SearchResultAdapter(MainActivity.<span class="keyword">this</span>,showItem);</span><br><span class="line">listView.setAdapter(searchResultAdapter);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>表单关键信息的非对称加密传输</title>
    <url>/2021/01/20/%E8%A1%A8%E5%8D%95%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF%E7%9A%84%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<h1 id="1、背景环境"><a href="#1、背景环境" class="headerlink" title="1、背景环境"></a>1、背景环境</h1><p><img src="/images/20210120204729.png" alt="img"></p>
<p>这是一个普通的用户登录表单(这里使用的是HTTP协议，当然如果使用HTTPS的话就不需要这样的操作了)，我们假设用户的计算机是安全的，那么如何保证用户的表单数据在用户计算机和服务器之间传输过程中的安全呢？</p>
<p>传统的对称加密由于加密解密为同一密钥，所以一旦该密钥泄露，攻击者就可以拿着此密钥解密用户和服务器之间的数据。同时，对称加密的密钥如何安全到传输到通信双方也是一个令人头疼的问题, 针对这个问题，目前常见的解决方法是使用数字签名来解决。</p>
<p>由此，便产生了新的加密方式，即非对称加密方式。在非对称加密中密钥由两部分组成：公钥和私钥，公钥是专门用来加密信息的，私钥是专门用来解密信息的。这里我们假设一个应用场景：用户A希望和用户B进行加密通信，用户A,B各自生成一对密钥即A.pubKey, A.privateKey, B.pubKey, B.privateKey.然后A,B分别将自己的公钥发送给对方（这里如果有中间人攻击的话会出现问题），此后如果A希望和B通信就是用B给A的公钥对信息进行加密然后传输给B，B拿到密文后使用B自己的私钥对密文进行解密；同样B希望和A亦是如此。</p>
<p>这里我首先编写了一个不进行任何加密的例子，模拟用户登录场景用用户名:<a href="mailto:&#98;&#104;&#x36;&#x61;&#x6f;&#x6c;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#98;&#104;&#x36;&#x61;&#x6f;&#x6c;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a> 和密码:123456的虚拟帐号登录，然后对此数据进行抓包分析得到如下图：</p>
<p><img src="/images/20210120204146.png" alt="img"></p>
<p>如图所示，可以很清楚看出表单里面的密码字段的数据。</p>
<p>接下来，我使用RSA算法对上述过程进行加密处理</p>
<p>浏览器端使用的是 ： <a href="https://github.com/travist/jsencrypt">jsencrypt</a> RSA实现</p>
<p>服务端使用的是：Java官方的RSA实现</p>
<p>进行加密处理后，再次抓包，结果如图所示：</p>
<p><img src="/images/20210120204324.png" alt="img"></p>
<p>可以看出此时密码字段已经被加密了，即使能够抓包，也不能获取到明文。</p>
<hr>
<p>在编写代码的过程中遇到一个问题：由于rsa加密后的密文采用base64编码，可能会有+号在密文中，而+号在post过程中会被转义为空格，会造成后端rsa解密方法异常，需要注意！</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>rsa</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络编程之信号的处理 &amp;&amp; Win10 Linux子系统</title>
    <url>/2019/10/31/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BF%A1%E5%8F%B7%E7%9A%84%E5%A4%84%E7%90%86-Win10-Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="0、Linux子系统安装和配置"><a href="#0、Linux子系统安装和配置" class="headerlink" title="0、Linux子系统安装和配置"></a>0、Linux子系统安装和配置</h2><p>要想体验Win10 的linux子系统</p>
<ul>
<li>首先需要去Window功能里面勾选<strong>适用于Linux的Windows子系统</strong></li>
</ul>
<p><img src="/images/20191030231211.png" alt="img">、</p>
<ul>
<li>去微软商店下载一个子系统即可</li>
</ul>
<p><img src="/images/20191030231530.png" alt="img"></p>
<p>这里我下载的是Ubuntu 18.04 LTS 哈哈</p>
<p><img src="/images/20191030231720.png" alt="img"></p>
<p>就像安装软件一样，啥时Linux也搞一个windows子系统呢？</p>
<p>这时就会有一个小问题，这个linux的用户目录是否可以在windows文件管理器上找到？答案是肯定的！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs\home\michael</span><br></pre></td></tr></table></figure>

<p>如上所示，就是我的用户目录所在位置。</p>
<p>当然最好不要把写的代码放在这里面，容易丢失（如果你像我一样被重置电脑就能感受的这个痛点）</p>
<p>对于使用linux进行linux网络编程，其实你可以这样：</p>
<p>1.使用Windows文件管理器切换到代码所在目录</p>
<p>2.然后按住Shift同时点击鼠标右键可以看到</p>
<p><img src="/images/2019-10-30232633.png" alt="img"></p>
<p>这样就可以进行编译，测试了，美滋滋！</p>
<h2 id="1、Linux网络编程之信号量的处理"><a href="#1、Linux网络编程之信号量的处理" class="headerlink" title="1、Linux网络编程之信号量的处理"></a>1、Linux网络编程之信号量的处理</h2><p>几乎所有的信号都将终止接收到该信号的进程。对于一些简单的程序，这完全能满足要求。用户按了中断或者退出键，就可以停止一个有问题的程序的运行。但是在大型的程序中，一些意料之外的信号会导致大问题。例如，正当在对一个重要的数据库进行修改期间，由于不小心碰到了中断键，而使程序被意外的终止，从而产生严重的后果。UNIX  的系统调用signal()用于接收一个指定类型的信号，并可以指定相应的方法。这就是说，signal()能够将指定的处理函数与信号向关联。它在Linux 系统库signal.h 中的函<br> 数声明如下：<br> int signal (int sig, __sighandler_t handler);<br> Signal()有两个参数：<br> 第一个参数sig 指明了所要处理的信号类型，它可以取除了SIGKILL 和SIGSTOP 外的任何一种信号。</p>
<p>第二个参数handler 描述了与信号关联的动作，它可以取以下三种值：</p>
<p><strong>1. 一个返回值为整数的函数地址。</strong><br> 此函数必须在signal()被调用前声明，handler 中为这个函数的名字。当接收到一个类型为sig 的信号时，就执行handler 所指定的函数。这个函数应有如下形式的定义：<br> int func(int sig);<br> sig 是传递给它的唯一参数。执行了signal()调用后，进程只要接收到类型为sig 的信号，<br> 不管其正在执行程序的哪一部分，就立即执行func()函数。当func()函数执行结束后，控制<br> 权返回进程被中断的那一点继续执行。</p>
<p><strong>2.SIG_IGN</strong><br> 这个符号表示忽略信号。执行了相应的signal()调用好，进程会忽略类型为sig 的信号。</p>
<p><strong>3.SIG_DFL</strong><br> 这个符号表示恢复系统对信号的默认处理。<br> 函数如果执行成功，就返回信号在此次signal()调用之前的关联。<br> 如果函数执行失败，就返回SIG_ERR。通常这种情况只有当sig 参数不是有效的信号<br> 时才会发生。函数不对handler 的有效性进行检查。</p>
<p>在Linux 程序中常常利用SIG_IGN 和SIG_DFL 屏蔽SIGINT 和SIGQUIT 来保证执行重要任务的程序不会被意外的中止。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 信号的处理</span></span><br><span class="line"><span class="comment"> * Michael Jiang</span></span><br><span class="line"><span class="comment"> * Wed Oct 30 23:31:39 CST 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    signal(SIGINT,SIG_IGN); <span class="comment">//告诉进程将SIGINT信号忽略</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;aaaaaaaaaa\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bbbbbbbbbb\n&quot;</span>);</span><br><span class="line">    signal(SIGINT,SIG_DFL); <span class="comment">//恢复对SIGINT信号的处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc signal_test.c &amp;&amp; .&#x2F;a.out</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">bbbbbbbbbb</span><br></pre></td></tr></table></figure>

<p>可以看出在程序打印完aaaaaaaaaa后我使用CTRL+C进行终止结果进程均未响应我的终止信号。</p>
<p>再看信号复位问题：</p>
<p>在Linux 中，当一个信号的信号处理函数执行时，如果进程又接收到了该信号，该信号会自动被储存而不会中断信号处理函数的执行，直到信号处理函数执行完毕再重新调用相应的处理函数。下面的程序演示了这一点：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 信号的处理之捕获中捕获</span></span><br><span class="line"><span class="comment"> * Michael Jiang</span></span><br><span class="line"><span class="comment"> * Thu Oct 31 09:29:01 CST 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> sig)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    signal(SIGINT,func); <span class="comment">//告诉进程将SIGINT信号交给func函数处理</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;aaaaaaaaaa\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bbbbbbbbbb\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;开始逮！sig=%d\n&quot;</span>,sig);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;逮到了！sig=%d\n&quot;</span>,sig);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;a.out</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">^C开始逮！sig&#x3D;2</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">^C</span><br><span class="line">逮到了！sig&#x3D;2</span><br><span class="line">开始逮！sig&#x3D;2</span><br><span class="line">逮到了！sig&#x3D;2</span><br><span class="line">bbbbbbbbbb</span><br></pre></td></tr></table></figure>

<p>分析：程序开始执行当按下第一个^C时进入处理信号函数，接着又连续按了多个^C等第一个^C的处理执行完成后程序返回执行第二个^C的处理函数然后程序就结束了？？？</p>
<p>对于第三个和第四个^C均未处理，可以得到在处理过程中只能接受一个排队信号！！！</p>
<p>最后介绍一下alarm()</p>
<p>1．系统调用alarm()<br> alarm()是一个简单而有用的系统调用，它可以建立一个进程的报警时钟，在时钟定时器到时的时候，用信号向程序报告。alarm()系统调用在Linux 系统函数库unistd.h 中的函数<br> 声明如下：</p>
<p>unsigned int alarm(unsigned int seconds);<br> 函数唯一的参数是seconds，其以秒为单位给出了定时器的时间。当时间到达的时候，<br> 就向系统发送一个SIGARLM 信号。例如：<br> alarm(60);<br> 这一调用实现在60 秒后发一个SIGALRM 信号。alarm 不会象sleep  那样暂停调用进程的执行，它能立即返回，并使进程继续执行，直至指定的延迟时间到达发出SIGALRM信号。事实上，一个由alarm()调用设置好的报警时钟，在通过exec()调用后，仍将继续有效。但是，它在fork()调用后中，在子进程中失效。如果要使设置的报警时钟失效，只需要调用参数为零的alarm()：<br> alarm(0)</p>
<p>alarm()调用也不能积累。如果调用alarm 两次，则第二次调用就取代第一次调用。但是，alarm 的返回值柜橱了前一次设定的报警时钟的剩余时间。<br> 当需要对某项工作设置时间限制时，可以使用alarm()调用来实现。其基本方法为：先调用alarm()按时间限制值设置报警时钟，然后进程作某一工作。如果进程在规定时间以内完成这一工作，就再调用alarm(0)使报警时钟失效。如果在规定时间内未能完成这一工作，进程就会被报警时钟的SIGALRM 信号中断，然后对它进行校正。</p>
<p>下面通过一个简单的限时答题程序来演示一下alarm的使用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限时答题程序</span></span><br><span class="line"><span class="comment"> * Michael Jiang</span></span><br><span class="line"><span class="comment"> * Thu Oct 31 10:04:21 CST 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BELL <span class="meta-string">&#x27;\007&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIMEOUT 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;  <span class="comment">//得分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// alarm信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">catch</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(BELL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n你答题超时了！\n得分:%d\n&quot;</span>,score);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;紧张刺激的限时答题程序\n你将回答五道加法题，每道题限时五秒！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先绑定一下信号处理方法</span></span><br><span class="line">    signal(SIGALRM,<span class="keyword">catch</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> lop,rop;</span><br><span class="line">    <span class="keyword">while</span> (cnt--)</span><br><span class="line">    &#123;</span><br><span class="line">        srand((<span class="keyword">int</span>)time(<span class="literal">NULL</span>)); </span><br><span class="line">        lop = rand() % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        rop = rand() % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d+%d=&quot;</span>,lop,rop);</span><br><span class="line">        alarm(TIMEOUT);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ans);</span><br><span class="line">        <span class="keyword">if</span>(ans == lop + rop)&#123;</span><br><span class="line">            score++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;恭喜完成所有题目,最终得分:%d\n&quot;</span>,score);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们每道题都在5s内给出答案就不会触发alarm信号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;a.out</span><br><span class="line">紧张刺激的限时答题程序</span><br><span class="line">你将回答五道加法题，每道题限时五秒！</span><br><span class="line">2+6&#x3D;8</span><br><span class="line">0+2&#x3D;2</span><br><span class="line">4+9&#x3D;13</span><br><span class="line">5+3&#x3D;8</span><br><span class="line">2+8&#x3D;10</span><br><span class="line">恭喜完成所有题目,最终得分:5</span><br></pre></td></tr></table></figure>

<p>但是如果某道题超时的话就会直接结束游戏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;a.out</span><br><span class="line">紧张刺激的限时答题程序</span><br><span class="line">你将回答五道加法题，每道题限时五秒！</span><br><span class="line">2+3&#x3D;</span><br><span class="line">你答题超时了！</span><br><span class="line">得分:0</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>windows</tag>
        <tag>linux</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Error: could not open xxx\jre\lib\amd64\jvm.cfg</title>
    <url>/2019/10/30/Error-could-not-open-xxx-jre-lib-amd64-jvm-cfg/</url>
    <content><![CDATA[<h3 id="0、问题再现"><a href="#0、问题再现" class="headerlink" title="0、问题再现"></a>0、问题再现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang&gt;java -version</span><br><span class="line">Error: could not open &#96;D:\DevSoftware\jre\lib\amd64\jvm.cfg&#39;</span><br></pre></td></tr></table></figure>

<p>当我在cmd输入java -version 想查看一下Java版本的时候突然出现如上的奇怪报错。</p>
<p>几天前先是体验Docker把Hyper-v打开了，然后听说腾讯QQ更新了linuxqq又想开虚拟机体验一把，于是将Hyper-v关闭，结果就出事了。。。</p>
<p>无法正常启动，windows提示我重置电脑，我想重置就重置吧？</p>
<p>结果给我C盘自己装的软件全部删了，还给我一个<strong>已删除的应用.html</strong> 是怕重装时想不起我都装了什么软件吧！</p>
<p>于是我决定对于一些开发软件不再安装至C盘了，你在上面的报错信息中或许可以看出我把这些软件都安装在D盘了<code>D:\DevSoftware</code></p>
<h3 id="1、深入探究"><a href="#1、深入探究" class="headerlink" title="1、深入探究"></a>1、深入探究</h3><p>的确，根据报错上提供的地址是找不到<strong>jvm.cfg</strong> 因为我在安装jre的时候就给它安装在<code>D:\DevSoftware\jre</code>，根据这个路径也配置了环境变量；后来又觉得文件夹名字不带版本有点难受，所以给它重命名过从jre改成了jre1.8.0_231，结果今天想看一下java版本就报错了。</p>
<h3 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h3><p>通过询问度娘，得知需要修改注册表里面记录的安装目录值即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Runtime Environment\1.8.0_231\MSI</span><br></pre></td></tr></table></figure>

<p><img src="/images/20191030175936.png" alt="img"></p>
<p>OK，问题解决！</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统之进程调度算法-FCFS，RR，SJF</title>
    <url>/2019/10/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95-FCFS%EF%BC%8CRR%EF%BC%8CSJF/</url>
    <content><![CDATA[<p>本次重要模拟三种进程调度算法即</p>
<ul>
<li>先来先服务（FCFS）</li>
<li>时间片轮转（RR）</li>
<li>短进程优先（SJF）</li>
</ul>
<p>并分别计算他们的作业周转时间和带权周转时间以及平均作业周转时间和平均带权周转时间。</p>
<p>首先定义 进程控制块(PCB)结构体</p>
<p>mypcb.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_PCB_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_PCB_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_RUNNING  1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_READY    2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_CREATE	 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_BLOCKING 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_DEAD     5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pid;    <span class="comment">// 进程号</span></span><br><span class="line">    <span class="keyword">int</span> status; <span class="comment">// 进程状态</span></span><br><span class="line">    <span class="keyword">int</span> jid;     <span class="comment">// 作业号</span></span><br><span class="line"></span><br><span class="line">&#125;PCB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pcb_init</span><span class="params">(PCB *pcb, <span class="keyword">int</span> pid, <span class="keyword">int</span> status, <span class="keyword">int</span> jid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断进程是否全部死亡</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_all_dead</span><span class="params">(PCB *pcb)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>mypcb.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mypcb.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pcb_init</span><span class="params">(PCB *pcb, <span class="keyword">int</span> pid, <span class="keyword">int</span> status, <span class="keyword">int</span> jid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pcb[pid].pid = pid;</span><br><span class="line">    pcb[pid].status = status;</span><br><span class="line">    pcb[pid].jid = jid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_all_dead</span><span class="params">(PCB *pcb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pcb[i].status != PROCESS_DEAD)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来是FCFS</p>
<p>FCFS.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _FCFS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FCFS_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mypcb.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCFS</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>FCFS.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进程调度之先来先服务算法</span></span><br><span class="line"><span class="comment"> * M.J</span></span><br><span class="line"><span class="comment"> * Fri Oct 18 21:56:21 DST 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FCFS.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fcfs_clock = <span class="number">0</span>; <span class="comment">//时钟</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> fcfs_r_turn_time_total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> fcfs_turn_time_total = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// CPU执行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcfs_call_cpu</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span>&#123;</span><br><span class="line">    pcb-&gt;status = PROCESS_RUNNING;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> each_time = job[pcb-&gt;jid];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid =%d jid=%d call_cpu[%d-&quot;</span>,pcb-&gt;pid,pcb-&gt;jid,fcfs_clock);</span><br><span class="line">    fcfs_clock += job[pcb-&gt;jid];</span><br><span class="line">    job[pcb-&gt;jid] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d]\n&quot;</span>,fcfs_clock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%d jid=%d finshed turn_time=%d r_turn_time=%lf\n&quot;</span>,\</span><br><span class="line">            pcb-&gt;pid,pcb-&gt;jid,fcfs_clock,fcfs_clock/(each_time * <span class="number">1.0</span>));</span><br><span class="line">    fcfs_r_turn_time_total += fcfs_clock/(each_time * <span class="number">1.0</span>);</span><br><span class="line">    fcfs_turn_time_total += fcfs_clock;</span><br><span class="line">    pcb-&gt;status = PROCESS_DEAD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCFS</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设作业进入顺序为job[0]~job[9]</span></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pcb[i].status == PROCESS_READY)&#123;</span><br><span class="line">                fcfs_call_cpu(&amp;pcb[i],job);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(is_all_dead(pcb))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ave_turn_time=%lf ave_r_turn_time=%lf\n&quot;</span>,fcfs_turn_time_total / <span class="number">10.0</span> ,fcfs_r_turn_time_total / <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于短进程优先算法我们还需要一个排序算法将作业排序</p>
<p>quicksort.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _QUICK_SORT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	_QUICK_SORT_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size,<span class="keyword">int</span> *work_order)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">array_copy</span><span class="params">(<span class="keyword">int</span> *src,<span class="keyword">int</span> src_size, <span class="keyword">int</span> *dst, <span class="keyword">int</span> dst_size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>quicksort.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *快速排序</span></span><br><span class="line"><span class="comment"> *M.J</span></span><br><span class="line"><span class="comment"> *Sat Oct 19 08:35:25 UTC 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">      </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>     </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;quicksort.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置排序规则</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * a, <span class="keyword">const</span> <span class="keyword">void</span> * b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ( *(<span class="keyword">int</span>*)a - *(<span class="keyword">int</span>*)b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size,<span class="keyword">int</span> *work_order)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b[size];</span><br><span class="line">	array_copy(a,<span class="number">10</span>,b,<span class="number">10</span>);</span><br><span class="line">	qsort(b, size, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), compare);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; size; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j] == b[i])&#123;</span><br><span class="line">				work_order[i] = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">array_copy</span><span class="params">(<span class="keyword">int</span> *src,<span class="keyword">int</span> src_size, <span class="keyword">int</span> *dst, <span class="keyword">int</span> dst_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dst_size &lt; src_size)&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; src_size; i++)&#123;</span><br><span class="line">		dst[i] = src[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SJF.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SJF_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SJF_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mypcb.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SJF</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>SJF.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *进程调度之短作业优先算法</span></span><br><span class="line"><span class="comment"> *M.J</span></span><br><span class="line"><span class="comment"> *Sat Oct 19 08:31:25 UTC 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mypcb.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;quicksort.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SJF.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sjf_clock = <span class="number">0</span>; <span class="comment">//时钟</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sjf_r_turn_time_total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> sjf_turn_time_total = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// CPU执行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sjf_call_cpu</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span>&#123;</span><br><span class="line">    pcb-&gt;status = PROCESS_RUNNING;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> each_time = job[pcb-&gt;jid];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid =%d jid=%d call_cpu[%d-&quot;</span>,pcb-&gt;pid,pcb-&gt;jid,sjf_clock);</span><br><span class="line">    sjf_clock += job[pcb-&gt;jid];</span><br><span class="line">    job[pcb-&gt;jid] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d]\n&quot;</span>,sjf_clock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%d jid=%d finshed turn_time=%d r_turn_time=%lf\n&quot;</span>,\</span><br><span class="line">            pcb-&gt;pid,pcb-&gt;jid,sjf_clock,sjf_clock/(each_time * <span class="number">1.0</span>));</span><br><span class="line">    sjf_r_turn_time_total += sjf_clock/(each_time * <span class="number">1.0</span>);</span><br><span class="line">    sjf_turn_time_total += sjf_clock;</span><br><span class="line">    pcb-&gt;status = PROCESS_DEAD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SJF</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 作业序列</span></span><br><span class="line">	<span class="keyword">int</span> work_order[<span class="number">10</span>];</span><br><span class="line">	</span><br><span class="line">	quick_sort(job,<span class="number">10</span>,work_order);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pcb[work_order[i]].status == PROCESS_READY)&#123;</span><br><span class="line">                sjf_call_cpu(&amp;pcb[work_order[i]],job);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(is_all_dead(pcb))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ave_turn_time=%lf ave_r_turn_time=%lf\n&quot;</span>,sjf_turn_time_total / <span class="number">10.0</span> ,sjf_r_turn_time_total / <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RR.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _RR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _RR_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mypcb.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RR</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>RR.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进程调度之时间片轮转法</span></span><br><span class="line"><span class="comment"> * M.J</span></span><br><span class="line"><span class="comment"> * Fri Oct 18 22:16:11 DST 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RR_TIME_SLICE 5 <span class="comment">// 时间片大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;RR.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rr_clock = <span class="number">0</span>; <span class="comment">//时钟</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> rr_r_turn_time_total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> rr_turn_time_total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rr_each_time[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// CPU执行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rr_call_cpu</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> each_time = <span class="number">0</span>;</span><br><span class="line">    rr_each_time[pcb-&gt;jid] = job[pcb-&gt;jid];</span><br><span class="line">    pcb-&gt;status = PROCESS_RUNNING;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid =%d jid=%d call_cpu[%d-&quot;</span>,pcb-&gt;pid,pcb-&gt;jid,rr_clock);</span><br><span class="line">    <span class="keyword">if</span>(job[pcb-&gt;jid] &gt; RR_TIME_SLICE)&#123;</span><br><span class="line">        job[pcb-&gt;jid] -= RR_TIME_SLICE;</span><br><span class="line">        rr_clock += <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d]\n&quot;</span>,rr_clock);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        each_time = rr_clock;</span><br><span class="line">        rr_clock += job[pcb-&gt;jid];</span><br><span class="line">        job[pcb-&gt;jid] = <span class="number">0</span>;</span><br><span class="line">        pcb-&gt;status = PROCESS_DEAD;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d]\n&quot;</span>,rr_clock);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pid=%d jid=%d finshed turn_time=%d r_turn_time=%lf\n&quot;</span>,\</span><br><span class="line">            pcb-&gt;pid,pcb-&gt;jid,rr_clock,rr_clock/(rr_each_time[pcb-&gt;jid] * <span class="number">1.0</span>));</span><br><span class="line">        rr_r_turn_time_total += rr_clock/(rr_each_time[pcb-&gt;jid] * <span class="number">1.0</span>);</span><br><span class="line">        rr_turn_time_total += rr_clock;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pcb-&gt;status = PROCESS_READY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RR</span><span class="params">(PCB *pcb, <span class="keyword">int</span> *job)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pcb[i].status == PROCESS_READY)&#123;</span><br><span class="line">                rr_call_cpu(&amp;pcb[i],job);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(is_all_dead(pcb))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ave_turn_time=%lf ave_r_turn_time=%lf\n&quot;</span>,rr_turn_time_total / <span class="number">10.0</span> ,rr_r_turn_time_total / <span class="number">10.0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后就是我们的main函数了哈哈！</p>
<p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mypcb.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;RR.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FCFS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SJF.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_JOB_SIZE 10 <span class="comment">// 最大作业数</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//每个作业的周转时间</span></span><br><span class="line"><span class="comment">//平均周转时间</span></span><br><span class="line"><span class="comment">//带权周转时间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义JOB数组 存放时长</span></span><br><span class="line">    <span class="keyword">int</span> job[MAX_JOB_SIZE] = &#123;</span><br><span class="line">        <span class="number">10</span>, <span class="number">12</span>, <span class="number">24</span>,  <span class="number">5</span>, <span class="number">19</span>,</span><br><span class="line">        <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义PCB块</span></span><br><span class="line">    PCB pcb[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化进程并分配作业</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        pcb_init(pcb,i,PROCESS_READY,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+---[Process Schedule Demo]--+\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|1.FCFS                      |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|2.RR                        |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|3.SJF                       |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|4.Exit                      |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;+----------------------------+\n&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> op = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">    <span class="keyword">switch</span> (op)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        FCFS(pcb,job);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        RR(pcb,job);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		SJF(pcb,job);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译和运行：</p>
<p><img src="/images/20191026212840.png" alt="img"></p>
<p>这里我为什么要放一张图片？</p>
<p>当然是展示一下我的Desktop PC终于升级到win10 1903了！（虽然丢失了很多东西）</p>
<p>选1执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;1</span><br><span class="line">pid &#x3D;0 jid&#x3D;0 call_cpu[0-10]</span><br><span class="line">pid&#x3D;0 jid&#x3D;0 finshed turn_time&#x3D;10 r_turn_time&#x3D;1.000000</span><br><span class="line">pid &#x3D;1 jid&#x3D;1 call_cpu[10-22]</span><br><span class="line">pid&#x3D;1 jid&#x3D;1 finshed turn_time&#x3D;22 r_turn_time&#x3D;1.833333</span><br><span class="line">pid &#x3D;2 jid&#x3D;2 call_cpu[22-46]</span><br><span class="line">pid&#x3D;2 jid&#x3D;2 finshed turn_time&#x3D;46 r_turn_time&#x3D;1.916667</span><br><span class="line">pid &#x3D;3 jid&#x3D;3 call_cpu[46-51]</span><br><span class="line">pid&#x3D;3 jid&#x3D;3 finshed turn_time&#x3D;51 r_turn_time&#x3D;10.200000</span><br><span class="line">pid &#x3D;4 jid&#x3D;4 call_cpu[51-70]</span><br><span class="line">pid&#x3D;4 jid&#x3D;4 finshed turn_time&#x3D;70 r_turn_time&#x3D;3.684211</span><br><span class="line">pid &#x3D;5 jid&#x3D;5 call_cpu[70-81]</span><br><span class="line">pid&#x3D;5 jid&#x3D;5 finshed turn_time&#x3D;81 r_turn_time&#x3D;7.363636</span><br><span class="line">pid &#x3D;6 jid&#x3D;6 call_cpu[81-103]</span><br><span class="line">pid&#x3D;6 jid&#x3D;6 finshed turn_time&#x3D;103 r_turn_time&#x3D;4.681818</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[103-136]</span><br><span class="line">pid&#x3D;7 jid&#x3D;7 finshed turn_time&#x3D;136 r_turn_time&#x3D;4.121212</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[136-180]</span><br><span class="line">pid&#x3D;8 jid&#x3D;8 finshed turn_time&#x3D;180 r_turn_time&#x3D;4.090909</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[180-235]</span><br><span class="line">pid&#x3D;9 jid&#x3D;9 finshed turn_time&#x3D;235 r_turn_time&#x3D;4.272727</span><br><span class="line">ave_turn_time&#x3D;93.400000 ave_r_turn_time&#x3D;4.316451</span><br><span class="line"></span><br><span class="line">C:\Users\Michael Jiang\Desktop\OS\Process_Schedule_Algorithms&gt;</span><br></pre></td></tr></table></figure>

<p>选2执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;2</span><br><span class="line">pid &#x3D;0 jid&#x3D;0 call_cpu[0-5]</span><br><span class="line">pid &#x3D;1 jid&#x3D;1 call_cpu[5-10]</span><br><span class="line">pid &#x3D;2 jid&#x3D;2 call_cpu[10-15]</span><br><span class="line">pid &#x3D;3 jid&#x3D;3 call_cpu[15-20]</span><br><span class="line">pid&#x3D;3 jid&#x3D;3 finshed turn_time&#x3D;20 r_turn_time&#x3D;4.000000</span><br><span class="line">pid &#x3D;4 jid&#x3D;4 call_cpu[20-25]</span><br><span class="line">pid &#x3D;5 jid&#x3D;5 call_cpu[25-30]</span><br><span class="line">pid &#x3D;6 jid&#x3D;6 call_cpu[30-35]</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[35-40]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[40-45]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[45-50]</span><br><span class="line">pid &#x3D;0 jid&#x3D;0 call_cpu[50-55]</span><br><span class="line">pid&#x3D;0 jid&#x3D;0 finshed turn_time&#x3D;55 r_turn_time&#x3D;11.000000</span><br><span class="line">pid &#x3D;1 jid&#x3D;1 call_cpu[55-60]</span><br><span class="line">pid &#x3D;2 jid&#x3D;2 call_cpu[60-65]</span><br><span class="line">pid &#x3D;4 jid&#x3D;4 call_cpu[65-70]</span><br><span class="line">pid &#x3D;5 jid&#x3D;5 call_cpu[70-75]</span><br><span class="line">pid &#x3D;6 jid&#x3D;6 call_cpu[75-80]</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[80-85]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[85-90]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[90-95]</span><br><span class="line">pid &#x3D;1 jid&#x3D;1 call_cpu[95-97]</span><br><span class="line">pid&#x3D;1 jid&#x3D;1 finshed turn_time&#x3D;97 r_turn_time&#x3D;48.500000</span><br><span class="line">pid &#x3D;2 jid&#x3D;2 call_cpu[97-102]</span><br><span class="line">pid &#x3D;4 jid&#x3D;4 call_cpu[102-107]</span><br><span class="line">pid &#x3D;5 jid&#x3D;5 call_cpu[107-108]</span><br><span class="line">pid&#x3D;5 jid&#x3D;5 finshed turn_time&#x3D;108 r_turn_time&#x3D;108.000000</span><br><span class="line">pid &#x3D;6 jid&#x3D;6 call_cpu[108-113]</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[113-118]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[118-123]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[123-128]</span><br><span class="line">pid &#x3D;2 jid&#x3D;2 call_cpu[128-133]</span><br><span class="line">pid &#x3D;4 jid&#x3D;4 call_cpu[133-137]</span><br><span class="line">pid&#x3D;4 jid&#x3D;4 finshed turn_time&#x3D;137 r_turn_time&#x3D;34.250000</span><br><span class="line">pid &#x3D;6 jid&#x3D;6 call_cpu[137-142]</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[142-147]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[147-152]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[152-157]</span><br><span class="line">pid &#x3D;2 jid&#x3D;2 call_cpu[157-161]</span><br><span class="line">pid&#x3D;2 jid&#x3D;2 finshed turn_time&#x3D;161 r_turn_time&#x3D;40.250000</span><br><span class="line">pid &#x3D;6 jid&#x3D;6 call_cpu[161-163]</span><br><span class="line">pid&#x3D;6 jid&#x3D;6 finshed turn_time&#x3D;163 r_turn_time&#x3D;81.500000</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[163-168]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[168-173]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[173-178]</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[178-183]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[183-188]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[188-193]</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[193-196]</span><br><span class="line">pid&#x3D;7 jid&#x3D;7 finshed turn_time&#x3D;196 r_turn_time&#x3D;65.333333</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[196-201]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[201-206]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[206-211]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[211-216]</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[216-220]</span><br><span class="line">pid&#x3D;8 jid&#x3D;8 finshed turn_time&#x3D;220 r_turn_time&#x3D;55.000000</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[220-225]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[225-230]</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[230-235]</span><br><span class="line">pid&#x3D;9 jid&#x3D;9 finshed turn_time&#x3D;235 r_turn_time&#x3D;47.000000</span><br><span class="line">ave_turn_time&#x3D;139.200000 ave_r_turn_time&#x3D;49.483333</span><br><span class="line"></span><br><span class="line">C:\Users\Michael Jiang\Desktop\OS\Process_Schedule_Algorithms&gt;</span><br></pre></td></tr></table></figure>

<p>选3执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;3</span><br><span class="line">pid &#x3D;3 jid&#x3D;3 call_cpu[0-5]</span><br><span class="line">pid&#x3D;3 jid&#x3D;3 finshed turn_time&#x3D;5 r_turn_time&#x3D;1.000000</span><br><span class="line">pid &#x3D;0 jid&#x3D;0 call_cpu[5-15]</span><br><span class="line">pid&#x3D;0 jid&#x3D;0 finshed turn_time&#x3D;15 r_turn_time&#x3D;1.500000</span><br><span class="line">pid &#x3D;5 jid&#x3D;5 call_cpu[15-26]</span><br><span class="line">pid&#x3D;5 jid&#x3D;5 finshed turn_time&#x3D;26 r_turn_time&#x3D;2.363636</span><br><span class="line">pid &#x3D;1 jid&#x3D;1 call_cpu[26-38]</span><br><span class="line">pid&#x3D;1 jid&#x3D;1 finshed turn_time&#x3D;38 r_turn_time&#x3D;3.166667</span><br><span class="line">pid &#x3D;4 jid&#x3D;4 call_cpu[38-57]</span><br><span class="line">pid&#x3D;4 jid&#x3D;4 finshed turn_time&#x3D;57 r_turn_time&#x3D;3.000000</span><br><span class="line">pid &#x3D;6 jid&#x3D;6 call_cpu[57-79]</span><br><span class="line">pid&#x3D;6 jid&#x3D;6 finshed turn_time&#x3D;79 r_turn_time&#x3D;3.590909</span><br><span class="line">pid &#x3D;2 jid&#x3D;2 call_cpu[79-103]</span><br><span class="line">pid&#x3D;2 jid&#x3D;2 finshed turn_time&#x3D;103 r_turn_time&#x3D;4.291667</span><br><span class="line">pid &#x3D;7 jid&#x3D;7 call_cpu[103-136]</span><br><span class="line">pid&#x3D;7 jid&#x3D;7 finshed turn_time&#x3D;136 r_turn_time&#x3D;4.121212</span><br><span class="line">pid &#x3D;8 jid&#x3D;8 call_cpu[136-180]</span><br><span class="line">pid&#x3D;8 jid&#x3D;8 finshed turn_time&#x3D;180 r_turn_time&#x3D;4.090909</span><br><span class="line">pid &#x3D;9 jid&#x3D;9 call_cpu[180-235]</span><br><span class="line">pid&#x3D;9 jid&#x3D;9 finshed turn_time&#x3D;235 r_turn_time&#x3D;4.272727</span><br><span class="line">ave_turn_time&#x3D;87.400000 ave_r_turn_time&#x3D;3.139773</span><br></pre></td></tr></table></figure>

<p>选4是退出。</p>
]]></content>
      <tags>
        <tag>c</tag>
        <tag>algo</tag>
      </tags>
  </entry>
  <entry>
    <title>Assembly-包含多个段的程序 &amp; DEBUG使用指南</title>
    <url>/2019/10/26/Assembly-%E5%8C%85%E5%90%AB%E5%A4%9A%E4%B8%AA%E6%AE%B5%E7%9A%84%E7%A8%8B%E5%BA%8F-DEBUG%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>时隔近一年，再次拾起Asm，这次因该可以一下学到底？</p>
<p>我使用的工具是DOSBox-&gt;<a href="http://sencom.top/?p=392">使用 DOSBox 学习 Assembly</a></p>
<p>今天就拿书上的程序6.4例子看一看吧！顺便提一下我用的是王爽的《汇编语言（第3版）》很棒的汇编入门教材。</p>
<p>直接看程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    dw 0123h, 0456h, 0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:  mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,20h ;设置栈顶ss:sp指向stack:20</span><br><span class="line"></span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax   ;ds:bx指向data段中的第一个单元</span><br><span class="line"></span><br><span class="line">        mov bx,0</span><br><span class="line">        mov cx,8</span><br><span class="line">    s:  push [bx]</span><br><span class="line">        add bx,2</span><br><span class="line">        loop s  ;此循环是将data段中的0~15单元中的8个字型数据依次入栈</span><br><span class="line"></span><br><span class="line">        mov bx,0</span><br><span class="line">    s0: pop [bx]</span><br><span class="line">        add bx,2</span><br><span class="line">        loop s0 ;此循环是将出栈8个字型数据到data段的0~15单元中</span><br><span class="line"></span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>这个程序将数据，代码，栈放到了不同的段中，这样可以使得代码显得结构清晰。</p>
<p>功能分析：使用栈将数据段中的8个字型的数据进行反转。</p>
<p>下面通过DEBUG来运行</p>
<p><img src="/images/20191026203839.png" alt="img"></p>
<p>使用t命令进行单步运行（后面会总结常用的DEBUG命令）</p>
<p>通过第一个红框可以发现DS段地址为076A，此时我们使用-d命令查看076a:0开始向后128个单元的内存内容可以发现我们在数据段中定义的8个字型数据（存放为高字节在前，底字节在后）</p>
<p>继续使用-t命令执行</p>
<p><img src="/images/20191026204924.png" alt="img"></p>
<p>执行完后再次使用-d命令查看内存 发现076a:0—-076a:9这段内存中的数据的确反转了。</p>
<p>下面是DEBUG工具常用命令：</p>
<p>DEBUG下最常用的调试指令为六个</p>
<p>一、常用DEBUG命令</p>
<p>（1）R ：查看更改cpu寄存器内容</p>
<p>（2）D：查看内存中内容</p>
<p>（3）E：改写内存中内容</p>
<p>（4）U：将内存中机器指令翻译成汇编指令</p>
<p>（5）T：执行一条机器指令</p>
<p>（6）A：以汇编格式在内存中写入一条指令</p>
<p>二、常用命令的使用</p>
<p>1.R命令：查看 更改CPU寄存器内容</p>
<p>输入r后回车，会显示所有寄存器的数值</p>
<p>如果修改寄存器数据 如ax寄存器数值 则输入“r ax”后回车，在“：”后输入新数据，回车则修改完成。</p>
<p><img src="/images/20191026210124.png" alt="img"></p>
<p>2.命令d: 查看内存数据</p>
<p>D命令显示数据个数如下所示，内存地址格式为【段地址：偏移地址】，段地址和偏移地址共同组成内存地址，实际内存地址=段地址+偏移地址</p>
<p>直接输入d 显示的内存区域地址为上次查看位置后内存数据</p>
<p>输入命令时，可以直接输入内存地址，查看制定地址的内存数据。如D【1000:0000】 直接显示命令 段地址为1000，偏移地址为0 的内存数据。</p>
<p>采用“d 段地址：起始偏移地址 结尾偏移地址 ”可以查看起始地址到结尾地址范围内的数据 。如“d 073f:0 9” 查看数据范围为“073f:0 ~ 073f:9”</p>
<p><img src="/images/20191026210300.png" alt="img"></p>
<p>3.E命令改写内存中的数据</p>
<p>（1）“e 段地址：偏移地址 数据1 数据2 … 数据n”方式，一次性修改指定地址的n个数据</p>
<p>（2）.”e 段地址：偏移地址” 按照提示 单个输入</p>
<p>输入命令后，光标停在“.”后，“.”前为改地址原始数据，在“.”后输入新数据 ，按空格 修改下一个地址数据。输入完成，直接按回车</p>
<p>（3）“e 段地址：偏移地址 ‘字符1’ ‘字符2’ …‘字符n’ ”在指定地址输入n个字符</p>
<p><img src="/images/20191026210851.png" alt="img"></p>
<p>\4. 命令 U 将指定地址的机器码翻译为汇编指令，并显示出来</p>
<p>格式：“U 段地址：偏移地址”</p>
<p><img src="/images/20191026211011.png" alt="img"></p>
<p>5.T指令 执行一条或者多条指令</p>
<p>使用T 指令 执行内存地址为【CS寄存器数值：IP寄存器数据】位置的指令</p>
<p>（1）ax寄存器原始数据为0000，修改cs:ip = 1000:100后，在cs:ip 写入 “MOV AX , 1”的机器码，使用t命令执行后，ax寄存器数据被修改为0001</p>
<p>6.A命令，以汇编形式在内存中输入机器指令</p>
<p><img src="/images/20191026211313.png" alt="img"></p>
<p>Happy Coding!!!</p>
]]></content>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>pip使用技巧总结</title>
    <url>/2019/10/14/pip%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>每次使用pip安装包的时候总是忘记加-i参数来指定仓库，导致下载时速度非常慢，反手ctrl c再添加**-i <a href="https://pypi.mirrors.ustc.edu.cn/simple">https://pypi.mirrors.ustc.edu.cn/simple</a>** 。经常输这个镜像地址，现在国内几大镜像地址都会背了！！！</p>
<p>那么怎么操作才能把默认仓库改成国内的呢？百度一下，具体方法如下：</p>
<h3 id="1-在～里面创建一个配置文件"><a href="#1-在～里面创建一个配置文件" class="headerlink" title="1.在～里面创建一个配置文件"></a>1.在～里面创建一个配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;.pip</span><br></pre></td></tr></table></figure>

<h3 id="2-编辑pip-conf文件"><a href="#2-编辑pip-conf文件" class="headerlink" title="2.编辑pip.conf文件"></a>2.编辑pip.conf文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano ~&#x2F;.pip&#x2F;pip.conf</span><br></pre></td></tr></table></figure>

<p>添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">trusted-host &#x3D; pypi.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure>

<p>这下就换成了USTC的仓库了，试一下？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@SENCOM:~# pip3 install django</span><br><span class="line">Looking in indexes: http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">Collecting django</span><br><span class="line">  Downloading https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;packages&#x2F;b2&#x2F;79&#x2F;df0ffea7bf1e02c073c2633702c90f4384645c40a1dd09a308e02ef0c817&#x2F;Django-2.2.6-py3-none-any.whl (7.5MB)</span><br><span class="line">     |████████████████████████████████| 7.5MB 2.0MB&#x2F;s </span><br><span class="line">Collecting pytz (from django)</span><br><span class="line">  Downloading https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;packages&#x2F;87&#x2F;76&#x2F;46d697698a143e05f77bec5a526bf4e56a0be61d63425b68f4ba553b51f2&#x2F;pytz-2019.2-py2.py3-none-any.whl (508kB)</span><br><span class="line">     |████████████████████████████████| 512kB 12.9MB&#x2F;s </span><br><span class="line">Collecting sqlparse (from django)</span><br><span class="line">  Downloading https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;packages&#x2F;ef&#x2F;53&#x2F;900f7d2a54557c6a37886585a91336520e5539e3ae2423ff1102daf4f3a7&#x2F;sqlparse-0.3.0-py2.py3-none-any.whl</span><br><span class="line">Installing collected packages: pytz, sqlparse, django</span><br><span class="line">Successfully installed django-2.2.6 pytz-2019.2 sqlparse-0.3.0</span><br></pre></td></tr></table></figure>

<p>唉，USTC咋跳转到tsinghua了呢？不管了，能用就OK，百兆小水管终于可以满载啦！</p>
<hr>
<p>1，使用pip安装新的库<br> pip install 库名</p>
<p>2，列出已经安装的库<br> pip list</p>
<p>3，列出过期的库<br> pip list –outdated</p>
<p>4，升级库<br> pip install –upgrade 库名</p>
<p>5，显示包的详细信息<br> pip show 库名</p>
<p>6，安装指定版本号的包<br> pip install -v 库名==版本</p>
<p>7，卸载<br> pip uninstall 库名</p>
<p>8 ，查找包<br> pip search package</p>
<hr>
<p>2019/11/1补充</p>
<h2 id="1-大胆尝试"><a href="#1-大胆尝试" class="headerlink" title="1.大胆尝试"></a>1.大胆尝试</h2><p>模仿Linux上的成功方法进行如下设置：</p>
<p>在我的用户目录下创建文件**~.pip3\pip.conf**</p>
<p>好了？？？试一下便知！正好由于上次hyper-v事件导致软件丢失，就拿wxpython这个包来测试一下安装把！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang&gt;pip install wxpython</span><br><span class="line">Collecting wxpython</span><br><span class="line">  Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;b1&#x2F;aa&#x2F;a5c3953c3e888c0d9c5115fa28c3fcba8aea07614542cf846004f4dca4d9&#x2F;wxPython-4.0.7.post1-cp37-cp37m-win32.whl (14.0MB)</span><br><span class="line">     |                                | 51kB 19kB&#x2F;s eta 0:11:45</span><br><span class="line">ERROR: Operation cancelled by user</span><br></pre></td></tr></table></figure>

<p>好像没有起作用哎！</p>
<h2 id="2-Bing找解决方法"><a href="#2-Bing找解决方法" class="headerlink" title="2.Bing找解决方法"></a>2.Bing找解决方法</h2><p>还是Hyper-v事件我现在还不能访问Google，所以只能Bing了</p>
<p>最终在这里找到了解决方法：<a href="https://github.com/pypa/pip/issues/4087">https://github.com/pypa/pip/issues/4087</a></p>
<p>总结一下就是如下操作：</p>
<ul>
<li><p>首先检查一下你的AppData目录位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang&gt;echo %APPDATA%</span><br><span class="line">C:\Users\Michael Jiang\AppData\Roaming</span><br></pre></td></tr></table></figure>

<p>可以看出我的是在<strong>C:\Users\Michael Jiang\AppData\Roaming</strong></p>
</li>
<li><p>接下来就是在这个目录里创建pip文件夹并在pip文件夹里创建文件<strong>pip.ini</strong></p>
</li>
<li><p>pip.ini 里面保存如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout = 6000</span><br><span class="line">index-url = http://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">trusted-host = pypi.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure>

<p>OK，搞定</p>
</li>
</ul>
<p>最后看一下配置是否生效了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang&gt;pip install wxpython</span><br><span class="line">Looking in indexes: http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">Collecting wxpython</span><br><span class="line">  Downloading https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;packages&#x2F;b1&#x2F;aa&#x2F;a5c3953c3e888c0d9c5115fa28c3fcba8aea07614542cf846004f4dca4d9&#x2F;wxPython-4.0.7.post1-cp37-cp37m-win32.whl (14.0MB)</span><br><span class="line">     |████████████████████████████████| 14.0MB 363kB&#x2F;s</span><br><span class="line">Collecting six</span><br><span class="line">  Using cached https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;packages&#x2F;73&#x2F;fb&#x2F;00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9&#x2F;six-1.12.0-py2.py3-none-any.whl</span><br><span class="line">Requirement already satisfied: numpy; python_version &gt;&#x3D; &quot;3.0&quot; in d:\devsoftware\python3.7.4\lib\site-packages (from wxpython) (1.17.3)</span><br><span class="line">Collecting pillow</span><br><span class="line">  Using cached https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;packages&#x2F;4b&#x2F;88&#x2F;0a35f7ae1e436309a97c92fec81c1ab7d70b4a0646f39b420cbcecfb2de6&#x2F;Pillow-6.2.1-cp37-cp37m-win32.whl</span><br><span class="line">Installing collected packages: six, pillow, wxpython</span><br><span class="line">Successfully installed pillow-6.2.1 six-1.12.0 wxpython-4.0.7.post1</span><br></pre></td></tr></table></figure>

<p>的确成功了。</p>
]]></content>
      <tags>
        <tag>pyhthon</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统之页面置换算法-OPT，FIFO，LRU，CLOCK</title>
    <url>/2019/10/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95-OPT%EF%BC%8CFIFO%EF%BC%8CLRU%EF%BC%8CCLOCK/</url>
    <content><![CDATA[<h2 id="0、写在前面"><a href="#0、写在前面" class="headerlink" title="0、写在前面"></a>0、写在前面</h2><p>在进程运行过程中，若其所要访问的页面不在内存，而需要把他们调入内存，但内存已无空闲空间时，为了保证该进程能正常运行，系统必须从内存中调出一页程序或者数据送到磁盘对换区中。但应将那个页面调出，必须根据一定的算法来确定。我们通常把这类算法称为<strong>页面置换算法（Page-Repleacement Algorithms）。</strong>置换算法的好坏直接影响系统的性能。</p>
<p><img src="/images/2019-10-05_22-42-54.png" alt="img"></p>
<h2 id="1、最佳置换算法-OPT"><a href="#1、最佳置换算法-OPT" class="headerlink" title="1、最佳置换算法(OPT)"></a>1、最佳置换算法(OPT)</h2><p>最佳置换算法由Belady于1966年提出的一种理论上的算法。其所选择的被淘汰页面将是以后永不使用的，或许是在最长时间内不再被访问的页面。但由于无法预知一个进程在内存中的若干个页面中，哪个是未来最长时间内不再被访问的，因而该算法是无法实现的，但可以利用该算法去评价其他算法。</p>
<p>optiaml.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 页面置换算法之最佳置换算法</span></span><br><span class="line"><span class="comment"> * Michael Jiang</span></span><br><span class="line"><span class="comment"> * Fri 04 Oct 2019 10:54:02 PM CST</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">optimal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 无法实现</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h2 id="2、先进先出置换算法-FIFO"><a href="#2、先进先出置换算法-FIFO" class="headerlink" title="2、先进先出置换算法(FIFO)"></a>2、先进先出置换算法(FIFO)</h2><p>FIFO算法是最早出现的置换算法。该算法总是淘汰最先进入内存的页面，即选择在内存中驻留时间最长的的页面予以淘汰。该算法实现简单(但是需要一个队列)</p>
<p>queue.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _QUEUE_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkQueue</span>&#123;</span></span><br><span class="line">	Node *front;</span><br><span class="line">	Node *rear;</span><br><span class="line">	<span class="keyword">uint8_t</span> size;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queue_init</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">queue_push</span><span class="params">(LinkQueue **<span class="built_in">queue</span>,<span class="keyword">int</span> data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">queue_pop</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_front</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">queue_size</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>queue.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queue_init</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	(*<span class="built_in">queue</span>)-&gt;front = (*<span class="built_in">queue</span>)-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">	(*<span class="built_in">queue</span>)-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">queue_push</span><span class="params">(LinkQueue **<span class="built_in">queue</span>,<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	node-&gt;data = data;</span><br><span class="line">	node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>((*<span class="built_in">queue</span>)-&gt;front == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		(*<span class="built_in">queue</span>)-&gt;front = node;</span><br><span class="line">		(*<span class="built_in">queue</span>)-&gt;rear = node;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		(*<span class="built_in">queue</span>)-&gt;rear-&gt;next = node;</span><br><span class="line">		(*<span class="built_in">queue</span>)-&gt;rear = node;</span><br><span class="line">	&#125;</span><br><span class="line">	(*<span class="built_in">queue</span>)-&gt;size++;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">queue_size</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (*<span class="built_in">queue</span>)-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">queue_pop</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>((*<span class="built_in">queue</span>)-&gt;front == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Node *p = (*<span class="built_in">queue</span>)-&gt;front;</span><br><span class="line">	(*<span class="built_in">queue</span>)-&gt;front = (*<span class="built_in">queue</span>)-&gt;front-&gt;next;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_front</span><span class="params">(LinkQueue **<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (*<span class="built_in">queue</span>)-&gt;front-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FIFO.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 页面置换算法之先进先出页面置换算法</span></span><br><span class="line"><span class="comment"> * Michael Jiang</span></span><br><span class="line"><span class="comment"> * Fri 04 Oct 2019 10:54:02 PM CST</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;queue.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">current_in_block</span><span class="params">(<span class="keyword">int</span> *block, <span class="keyword">int</span> current)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(current == block[i])&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* FIFO 页面置换算法</span></span><br><span class="line"><span class="comment"> * @param page_index:进程使用的页面序列</span></span><br><span class="line"><span class="comment"> * @param block:进程分配到的物理块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FIFO</span><span class="params">(<span class="keyword">int</span> *page_index, <span class="keyword">int</span> *block)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 撸个队列出来</span></span><br><span class="line">	LinkQueue *<span class="built_in">queue</span> = (LinkQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">	queue_init(&amp;<span class="built_in">queue</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 页面替换次数</span></span><br><span class="line">	<span class="keyword">uint8_t</span> r_times = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 先将三个物理块填满</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		block[i] = page_index[i];</span><br><span class="line">		queue_push(&amp;<span class="built_in">queue</span>, page_index[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">size_t</span> t = <span class="number">0</span>; t &lt; <span class="number">3</span>; t++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,block[t]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 执行置换</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">3</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">size_t</span> t = <span class="number">0</span>; t &lt; <span class="number">3</span>; t++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(block[t] == queue_front(&amp;<span class="built_in">queue</span>) &amp;&amp; !current_in_block(block,page_index[i]))&#123;</span><br><span class="line">				block[t] = page_index[i];</span><br><span class="line">				queue_pop(&amp;<span class="built_in">queue</span>);</span><br><span class="line">				queue_push(&amp;<span class="built_in">queue</span>, page_index[i]);</span><br><span class="line">				r_times++;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">size_t</span> t = <span class="number">0</span>; t &lt; <span class="number">3</span>; t++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,block[t]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;r_times=%d\n&quot;</span>,r_times);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 假设系统为某进程分配三个物理块，并考虑有以下打页面引用顺序</span></span><br><span class="line">	<span class="keyword">int</span> page_index[<span class="number">20</span>] = &#123;</span><br><span class="line">		<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,\</span><br><span class="line">		<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span> \</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 系统为该进程分配了三个物理块</span></span><br><span class="line">	<span class="keyword">int</span> block[<span class="number">3</span>] =&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 使用FIFO算法进行页面置换</span></span><br><span class="line">	FIFO(page_index,block);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@SENCOM:~&#x2F;Code&#x2F;OS&#x2F;Page_Replacement_Algorithms# gcc queue.c FIFO.c &amp;&amp; .&#x2F;a.out</span><br><span class="line">7 -1 -1 </span><br><span class="line">7 0 -1 </span><br><span class="line">7 0 1 </span><br><span class="line">2 0 1 </span><br><span class="line">2 0 1 </span><br><span class="line">2 3 1 </span><br><span class="line">2 3 0 </span><br><span class="line">4 3 0 </span><br><span class="line">4 2 0 </span><br><span class="line">4 2 3 </span><br><span class="line">0 2 3 </span><br><span class="line">0 2 3 </span><br><span class="line">0 2 3 </span><br><span class="line">0 1 3 </span><br><span class="line">0 1 2 </span><br><span class="line">0 1 2 </span><br><span class="line">0 1 2 </span><br><span class="line">7 1 2 </span><br><span class="line">7 0 2 </span><br><span class="line">7 0 1 </span><br><span class="line">r_times&#x3D;12</span><br></pre></td></tr></table></figure>

<p>本测试用例在OPT算法下需要进行6次页面置换，而在FIFO算法下需要12次。</p>
<p>当我们增加Block大小后，FIFO算法下本用例的页面置换次数并不一定会降低，我们称这种现象叫做<strong>Belady异常</strong>。</p>
<h2 id="3、最近最少使用置换算法-LRU"><a href="#3、最近最少使用置换算法-LRU" class="headerlink" title="3、最近最少使用置换算法(LRU)"></a>3、最近最少使用置换算法(LRU)</h2><p>FIFO算法的性能之所以差，是因为它所依据的条件是各个页面调入内存的时间，而页面调入的先后并不能反映页面的使用情况。最近最久未使用（LRU）的页面置换算法是根据页面调入内存后的使用情况做出决策的。由于无法预测各页面将来的使用情况，只能利用“最近的过去”作为“最近的将来”的近似，因此，LRU置换算法选择的是最久未使用的页面予以淘汰。该算法赋予每个页面一个访问字段，用来记录一个页面上次被访问以来所经历的时间t。当需要淘汰一个页面时，选择现有页面中其t值最大的，即最近最久未使用的页面予以淘汰即可。</p>
<p>LRU.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 页面置换算法之最近最久未使用页面置换算法</span></span><br><span class="line"><span class="comment"> * Michael Jiang</span></span><br><span class="line"><span class="comment"> * Sun 06 Oct 2019 08:58:30 AM CST</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">int</span> time;</span><br><span class="line">&#125;Page;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">current_in_block</span><span class="params">(<span class="keyword">int</span> *block, <span class="keyword">int</span> current)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(current == block[i])&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_blok</span><span class="params">(<span class="keyword">int</span> *block)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前Block：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,block[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自增方法，使在block中的page time全部自增1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">auto_increment</span><span class="params">(Page *page,<span class="keyword">int</span> *block)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(block[i] != <span class="number">-1</span>)&#123;</span><br><span class="line">			page[block[i]].time++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* LRU 页面置换算法</span></span><br><span class="line"><span class="comment"> * @param page_index:进程使用的页面序列</span></span><br><span class="line"><span class="comment"> * @param block:进程分配到的物理块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LRU</span><span class="params">(<span class="keyword">int</span> now_page, <span class="keyword">int</span> *block,Page *page)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;time:%d %d %d\n&quot;</span>,page[block[<span class="number">0</span>]].time,page[block[<span class="number">1</span>]].time,page[block[<span class="number">2</span>]].time);</span><br><span class="line">	<span class="comment">// 找出time值最大的页</span></span><br><span class="line">	<span class="keyword">int</span> max_time = page[block[<span class="number">0</span>]].time;</span><br><span class="line">	<span class="keyword">int</span> max_page = block[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> max_index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(page[block[i]].time &gt; max_time)&#123;</span><br><span class="line">			max_time = page[block[i]].time;</span><br><span class="line">			max_page = block[i];</span><br><span class="line">			max_index = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新页%d换出旧页%d\n&quot;</span>,now_page,max_page);</span><br><span class="line">	<span class="comment">// 换出 time 最大的页</span></span><br><span class="line">	block[max_index] = now_page;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 重置time</span></span><br><span class="line">	page[max_page].time = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Page page[<span class="number">20</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 初始化page</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">		page[i].id = i;</span><br><span class="line">		page[i].time = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 假设系统为某进程分配三个物理块，并考虑有以下打页面引用顺序</span></span><br><span class="line">	<span class="keyword">int</span> page_index[<span class="number">20</span>] = &#123;</span><br><span class="line">		<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,\</span><br><span class="line">		<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span> \</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 系统为该进程分配了三个物理块</span></span><br><span class="line">	<span class="keyword">int</span> block[<span class="number">3</span>] =&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 先将前三个页调入Block</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		block[i] = page_index[i];</span><br><span class="line">		auto_increment(page,block);</span><br><span class="line">		print_blok(block);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 执行后续页</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">3</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">		<span class="comment">// 打印当前block中的页编号</span></span><br><span class="line">		print_blok(block);</span><br><span class="line">		<span class="keyword">if</span>(current_in_block(block,page_index[i]))&#123;</span><br><span class="line">			<span class="comment">// 如果接下来的页在Block中的话我们就修改一下time</span></span><br><span class="line">			page[page_index[i]].time = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;页%d存在于Block中，无需执行页面替换\n&quot;</span>,page_index[i]);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 如果不再当前进程的Block中就需要调用LRU进行页面替换</span></span><br><span class="line">			LRU(page_index[i],block,page);</span><br><span class="line">		&#125;</span><br><span class="line">		auto_increment(page,block);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译和执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@SENCOM:~&#x2F;Code&#x2F;OS&#x2F;Page_Replacement_Algorithms# gcc LRU.c &amp;&amp; .&#x2F;a.out </span><br><span class="line">当前Block：7 -1 -1 </span><br><span class="line">当前Block：7 0 -1 </span><br><span class="line">当前Block：7 0 1 </span><br><span class="line">当前Block：7 0 1 </span><br><span class="line">time:3 2 1</span><br><span class="line">新页2换出旧页7</span><br><span class="line"></span><br><span class="line">当前Block：2 0 1 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：2 0 1 </span><br><span class="line">time:2 1 3</span><br><span class="line">新页3换出旧页1</span><br><span class="line"></span><br><span class="line">当前Block：2 0 3 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：2 0 3 </span><br><span class="line">time:4 1 2</span><br><span class="line">新页4换出旧页2</span><br><span class="line"></span><br><span class="line">当前Block：4 0 3 </span><br><span class="line">time:1 2 3</span><br><span class="line">新页2换出旧页3</span><br><span class="line"></span><br><span class="line">当前Block：4 0 2 </span><br><span class="line">time:2 3 1</span><br><span class="line">新页3换出旧页0</span><br><span class="line"></span><br><span class="line">当前Block：4 3 2 </span><br><span class="line">time:3 1 2</span><br><span class="line">新页0换出旧页4</span><br><span class="line"></span><br><span class="line">当前Block：0 3 2 </span><br><span class="line">页3存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：0 3 2 </span><br><span class="line">页2存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：0 3 2 </span><br><span class="line">time:3 2 1</span><br><span class="line">新页1换出旧页0</span><br><span class="line"></span><br><span class="line">当前Block：1 3 2 </span><br><span class="line">页2存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：1 3 2 </span><br><span class="line">time:2 4 1</span><br><span class="line">新页0换出旧页3</span><br><span class="line"></span><br><span class="line">当前Block：1 0 2 </span><br><span class="line">页1存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：1 0 2 </span><br><span class="line">time:1 2 3</span><br><span class="line">新页7换出旧页2</span><br><span class="line"></span><br><span class="line">当前Block：1 0 7 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：1 0 7 </span><br><span class="line">页1存在于Block中，无需执行页面替换</span><br></pre></td></tr></table></figure>

<h2 id="4、时钟置换算法-CLOCK"><a href="#4、时钟置换算法-CLOCK" class="headerlink" title="4、时钟置换算法(CLOCK)"></a>4、时钟置换算法(CLOCK)</h2><p>虽然LRU是一种较好的算法，但由于它要求较多的硬件支持，使得其实现所需的成本过高，故在实际应用中，大多采用LRU的类似算法。Clock算法就是用的较多的一种LRU近似算法。</p>
<p>首先介绍一下<strong>简单Clock算法</strong>，只需要为每页设置一位访问位，再将内存中的所有页面都通过链接指针链接成一个循环队列。当某页被访问时，其访问位被置1。置换算法在选择一页淘汰时，只需检查访问位。如果是0，就选择该页换出，若为1，则重新将它置0，暂不换出，给予第二次驻留机会。再按照FIFO算法检查下一个页面。当检查到队列的最后一个页面时若其访问位仍为1，则返回队首去检查的一个页面。<strong>所以最坏的情况下要进行两轮扫描才能找到合适的淘汰页面。</strong></p>
<p>clock.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 页面置换算法之简单Clock页面置换算法</span></span><br><span class="line"><span class="comment"> * Michael Jiang</span></span><br><span class="line"><span class="comment"> * Sat 05 Oct 2019 10:32:10 AM CST</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页的数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;		<span class="comment">// 页面编号</span></span><br><span class="line">	<span class="keyword">bool</span> access;<span class="comment">// 该页是否被访问</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Page;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">current_in_block</span><span class="params">(<span class="keyword">int</span> *block, <span class="keyword">int</span> current)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(current == block[i])&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_blok</span><span class="params">(<span class="keyword">int</span> *block)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前Block：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,block[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 简单的 Clock 置换算法</span></span><br><span class="line"><span class="comment"> * @param page_index:进程使用的页面序列</span></span><br><span class="line"><span class="comment"> * @param block:进程分配到的物理块</span></span><br><span class="line"><span class="comment"> * @param page:Page数据结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clock</span><span class="params">(<span class="keyword">int</span> new_page, <span class="keyword">int</span> *block, Page **current, Page *page)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 找出合适的换出页</span></span><br><span class="line">	<span class="keyword">while</span>((*current)-&gt;access != <span class="number">0</span>)&#123;</span><br><span class="line">		(*current)-&gt;access = <span class="number">0</span>;</span><br><span class="line">		(*current) = (*current)-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;读入新页编号%d;换出的页编号:%d\n&quot;</span>,new_page,(*current)-&gt;id);</span><br><span class="line">	<span class="comment">// 将current指向的页面换出</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(block[i] == (*current)-&gt;id)&#123;</span><br><span class="line">			block[i] = new_page; <span class="comment">//换上新页</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 修改循环队列</span></span><br><span class="line">			page[new_page].access = <span class="number">1</span>;</span><br><span class="line">			page[new_page].id = new_page;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 找到current的前节点</span></span><br><span class="line">			Page *p = (*current);</span><br><span class="line">			<span class="keyword">int</span> step = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">while</span>(step--)&#123;</span><br><span class="line">				p = p-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			page[new_page].next = (*current)-&gt;next;</span><br><span class="line">			(*current) = &amp;page[new_page];</span><br><span class="line">			p-&gt;next = (*current);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 假设系统为某进程分配三个物理块，并考虑有以下的页面引用顺序</span></span><br><span class="line">	<span class="keyword">int</span> page_index[<span class="number">20</span>] = &#123;</span><br><span class="line">		<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,\</span><br><span class="line">		<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span> \</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	Page page[<span class="number">20</span>];</span><br><span class="line">	Page *current;</span><br><span class="line">	Page *p;</span><br><span class="line">	<span class="comment">// 系统为该进程分配了三个物理块</span></span><br><span class="line">	<span class="keyword">int</span> block[<span class="number">3</span>] =&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 首先将前三个页放到Block中</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">		block[i] = page_index[i];</span><br><span class="line">		page[page_index[i]].access = <span class="literal">true</span>;</span><br><span class="line">		page[page_index[i]].id = page_index[i];</span><br><span class="line">		<span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">			current = &amp;page[page_index[i]];</span><br><span class="line">			p = &amp;page[page_index[i]];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			p-&gt;next=&amp;page[page_index[i]];</span><br><span class="line">			p = &amp;page[page_index[i]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next = current;<span class="comment">// 形成循环队列，current指向队头</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 使用简单clock算法进行页面置换</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">3</span>; i &lt; <span class="number">20</span>; i++)&#123;			</span><br><span class="line">		<span class="comment">// 打印当前block中的页编号</span></span><br><span class="line">		print_blok(block);</span><br><span class="line">		<span class="comment">// 首先判断接下来的页面是否在Block中</span></span><br><span class="line">		<span class="keyword">if</span>(current_in_block(block,page_index[i]))&#123;</span><br><span class="line">			<span class="comment">// 如果接下来的页在Block中的话我们就修改一下访问位就OK</span></span><br><span class="line">			page[page_index[i]].access = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;页%d存在于Block中，无需执行页面替换\n&quot;</span>,page_index[i]);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 如果不再当前进程的Block中就需要调用clock进行页面替换</span></span><br><span class="line">			clock(page_index[i],block,&amp;current, page);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译和执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@SENCOM:~&#x2F;Code&#x2F;OS&#x2F;Page_Replacement_Algorithms# gcc clock.c &amp;&amp; .&#x2F;a.out </span><br><span class="line">当前Block：7 0 1 </span><br><span class="line">读入新页编号2;换出的页编号:7</span><br><span class="line"></span><br><span class="line">当前Block：2 0 1 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：2 0 1 </span><br><span class="line">读入新页编号3;换出的页编号:1</span><br><span class="line"></span><br><span class="line">当前Block：2 0 3 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：2 0 3 </span><br><span class="line">读入新页编号4;换出的页编号:2</span><br><span class="line"></span><br><span class="line">当前Block：4 0 3 </span><br><span class="line">读入新页编号2;换出的页编号:3</span><br><span class="line"></span><br><span class="line">当前Block：4 0 2 </span><br><span class="line">读入新页编号3;换出的页编号:4</span><br><span class="line"></span><br><span class="line">当前Block：3 0 2 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：3 0 2 </span><br><span class="line">页3存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：3 0 2 </span><br><span class="line">页2存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：3 0 2 </span><br><span class="line">读入新页编号1;换出的页编号:3</span><br><span class="line"></span><br><span class="line">当前Block：1 0 2 </span><br><span class="line">页2存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：1 0 2 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：1 0 2 </span><br><span class="line">页1存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：1 0 2 </span><br><span class="line">读入新页编号7;换出的页编号:1</span><br><span class="line"></span><br><span class="line">当前Block：7 0 2 </span><br><span class="line">页0存在于Block中，无需执行页面替换</span><br><span class="line"></span><br><span class="line">当前Block：7 0 2 </span><br><span class="line">读入新页编号1;换出的页编号:2</span><br></pre></td></tr></table></figure>

<p>最后提一下<strong>改进型Clock置换算法</strong>，将一个页面换出时，如果该页面已被修改过，便必须将该页重新写回到磁盘上;但如果该页未被修改过，则不必将它拷回磁盘。换言之，对于修改过的页面，在换出时所付出的开销比未修改的页面大。在改进型的Clock算法中，除须考虑页面的使用情况外，还需增加一个因素——置换代价。由访问位A和修改位M可以组合成下面四种类型的页面：</p>
<p>1类(A=0,M=0)：表示该页面最近既未被访问，又未被修改，是最佳淘汰页。</p>
<p>2类(A=0,M=1)：表示该页面最近未被访问，但已被修改，并不是很好的淘汰页。</p>
<p>3类(A=1,M=0)：表示该页最近已被访问，但未被修改，该页可能再次被访问。</p>
<p>4类(A=1,B=1)：表示最近已被访问且被修该，该页可能再被访问。</p>
<p>在内存中的每一页，都必定是这四类页之一。在进行页面置换时，可采用与简单Clock算法类似的算法，其差别在于该算法必须同时检查访问位和修改位，以确定该页属于四类叶中的哪一种。其执行步骤可分成一下三步：</p>
<p>（一）从指针所指示的当前位置开始，扫描循环队列，寻找A=0,M=0的第一类页面，将所有遇到的第一个页面作为所选中的淘汰页。在第一次扫描期间不改变访问位A。</p>
<p>（二）如果第一步失败，即查找一轮后未遇到第一类页面，则开始第二轮扫描，寻找A=0，M=1的第二类页面，将所遇到的第一个这类页面作为淘汰页。在第二轮扫描期间，将所有的扫描过的页面的访问位都置0。</p>
<p>（三）如果第二步失败，亦即未找到第二类页面，则旧将指针返回到开始的位置，并将所有的访问位复0。然后重复第一步，即寻找A=0，M=0的第一类页面，如果仍失败，必要时重复第二步。寻找A=0,M=1的第二类页面，此时就一定能够找到被淘汰的页。</p>
<p>该算法与简单Clock算法比较，可减少磁盘的I/O操作次数，但为了找到一个可置换的页，可能须经过几轮扫描。换言之，实现该算法本身的开销将有所增加。</p>
<p>改进型Clcok算法只需在原Clock算法的基础上进行简单修改即可，这里就不给出该算法的实现了。</p>
]]></content>
      <tags>
        <tag>c</tag>
        <tag>algo</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian瞎折腾系列-软件更新和显卡驱动问题</title>
    <url>/2019/10/03/Debian%E7%9E%8E%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E6%9B%B4%E6%96%B0%E5%92%8C%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>折腾源于热爱！由于国庆回家忘记携带我的笔记本电脑的电源适配器，所以只好把原来的HP微机（No. s5-1113cx）零件攒起来，还行可以开机。</p>
<p>本来准备跑个Kali Live之类的U盘系统将就用用呗，突然想到2018年春节时用这台电脑在一个80GB的硬盘上安装了一个CentOS吧？？？</p>
<p>找出来塞到主机里面，这个硬盘读盘叫声让人害怕（感觉下一秒就要挂掉）</p>
<p>本以为是CentOS没想到居然是带有Windows 壁纸的Debian！！！！还是xfce桌面漂亮又好用，Debian爱好者的莫名感动。</p>
<p><img src="/images/P91001-211215.jpg" alt="img"></p>
<p>来一波软件更新吧，首先来熟悉一下apt包管理器吧，好长时间都没用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@SENCOM:~# apt </span><br><span class="line">apt 1.8.2 (i386)</span><br><span class="line">用法： apt [选项] 命令</span><br><span class="line"></span><br><span class="line">命令行软件包管理器 apt 提供软件包搜索，管理和信息查询等功能。</span><br><span class="line">它提供的功能与其他 APT 工具相同（像 apt-get 和 apt-cache），</span><br><span class="line">但是默认情况下被设置得更适合交互。</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line">  list - 根据名称列出软件包</span><br><span class="line">  search - 搜索软件包描述</span><br><span class="line">  show - 显示软件包细节</span><br><span class="line">  install - 安装软件包</span><br><span class="line">  reinstall - reinstall packages</span><br><span class="line">  remove - 移除软件包</span><br><span class="line">  autoremove - 卸载所有自动安装且不再使用的软件包</span><br><span class="line">  update - 更新可用软件包列表</span><br><span class="line">  upgrade - 通过 安装&#x2F;升级 软件来更新系统</span><br><span class="line">  full-upgrade - 通过 卸载&#x2F;安装&#x2F;升级 来更新系统</span><br><span class="line">  edit-sources - 编辑软件源信息文件</span><br><span class="line"></span><br><span class="line">参见 apt(8) 以获取更多关于可用命令的信息。</span><br><span class="line">程序配置选项及语法都已经在 apt.conf(5) 中阐明。</span><br><span class="line">欲知如何配置软件源，请参阅 sources.list(5)。</span><br><span class="line">软件包及其版本偏好可以通过 apt_preferences(5) 来设置。</span><br><span class="line">关于安全方面的细节可以参考 apt-secure(8).</span><br><span class="line">                                         本 APT 具有超级牛力。</span><br></pre></td></tr></table></figure>

<p><strong>apt update</strong>：将远程软件库和本地软件库做对比，检查哪些软件可以更新，以及软件包依赖关系，给出一个分析报告。只检查不更新。<br> <strong>apt upgrade</strong>：在执行upgrade 之前要先执行update ，根据update的分析报告去下载并更新软件。在以下几种情况，某个待升级的软件包不会被升级。</p>
<p>新软件包和系统的某个软件包有冲突<br> 新软件包有新的依赖，但系统不满足依赖<br> 安装新软件包时，要求先移除旧的软件包</p>
<p><strong>apt dist-upgrade</strong>：在执行dist-upgrade 之前也要先执行update ，dist-upgrade 包含upgrade，同时增添了以下功能：</p>
<p>可以智能处理新软件包的依赖<br> 智能冲突解决系统<br> 安装新软件包时，可以移除旧软件包，但不是所有软件都可以。</p>
<p><strong>apt full-upgrade</strong>：在执行full-upgrade 之前也要先执行update ，升级整个系统，必要时可以移除旧软件包。</p>
<p>注意：如果出现update有可用更新而执行upgrade却无法更新的情况下可以试一试dist-upgrade</p>
<p>最好将apt源改为国内的源这样速度不是快一点两点，简直就是板车和火箭的区别。</p>
<p>结果更新结束重启机子马上就感觉不对劲了，分辨率变成700×400了，xrandr看一下只有700×400这一个选项，估计是显卡驱动没有装上</p>
<p>我去，linux最烦的就是显卡驱动的安装了</p>
<p>AMD官网走一波，顺利的下载了对应的驱动尝试安装一下</p>
<p><img src="/images/P91003-201741.jpg" alt="img"></p>
<p>还嫌XServer版本高？真是糟糕，去网上找了找没发现什么好的解决方案。</p>
<p>咦？为何不试一试开源的通用驱动呢？找一下，还真的有，还是Debain官网的教程</p>
<p><a href="https://wiki.debian.org/AtiHowTo">https://wiki.debian.org/AtiHowTo</a></p>
<p>按照上面的<strong>Installation</strong> 走一趟真的就修复了！</p>
<p><img src="/images/qq81515sd1s5ad15sad15.png" alt="img"></p>
<p>显示效果好多了。一晚上就折腾它了。</p>
]]></content>
      <tags>
        <tag>error</tag>
        <tag>linux</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Bochs体验Linux0.11</title>
    <url>/2019/09/29/%E4%BD%BF%E7%94%A8Bochs%E4%BD%93%E9%AA%8CLinux0-11/</url>
    <content><![CDATA[<p>最近比较膨胀准备再次向Linux0.11源码发起挑战。</p>
<p>直接读源码？不可取，拿出赵炯博士写的《Linux内核完全注释》重新学习一下。</p>
<p>这次希望能够在本学期内把它读完！</p>
<p>理论与实践要结合；天天看0.11源码都没体验过Linux0.11系统，有什么意思？</p>
<p>于是赵炯博士为我们提供了一个编译好的0.11镜像和模拟器。</p>
<p><a href="http://www.oldlinux.org/Linux.old/bochs/linux-0.11-devel-040329.zip">http://www.oldlinux.org/Linux.old/bochs/linux-0.11-devel-040329.zip</a></p>
<p>首先去上面的地址下载工具（包含模拟器和镜像）</p>
<p>这里我将它解压在<code>C:\Program Files (x86)</code></p>
<p>然后执行如下命令即可启动！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\Bochs-2.1.1&gt;bochs.exe -q -f bochsrc-hd.bxrc</span><br></pre></td></tr></table></figure>

<p><img src="/images/20190929212314.png" alt="img"></p>
<p>愉快的玩耍咯！</p>
<hr>
<p>这里立一下OS学习的一些计划：</p>
<p>这学期会更新一些关于<strong>进程管理</strong>，<strong>内存管理</strong>，<strong>文件管理</strong>等有关OS的简单实现（使用C语言）</p>
<p>上一篇不就是我的OS学习开篇嘛？</p>
<p>国庆期间不出意外会出进程调度相关的初代代码，为什么是初代？因为这个调度涉及的几个算法（FCFS，SJF，SP，HRRN， RR）我不能保证国庆内全部完成。</p>
<p>by the way,推荐一部纪录片-&gt;<a href="https://movie.douban.com/subject/1437389/">Revolution OS (2001)</a>;片中的Gates简直就被怼成开源世界的敌人，处处攻击开源世界。但是看看现在市值第一的微软收购了GitHub现在自家的田牌系统居然内置了WSL，开源了早期的田牌系统的文件管理器和Win10的计算器源代码！！！发起了许多开源项目！！！话说新的Terminal真滴漂亮。</p>
<p>现在Linux商业化第一梯队的RedHat，现在脸也不要了只剩一个红帽子了（调侃一下新Logo蛤蛤），最终难逃被IBM收购。</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统之死锁避免算法-银行家算法实现</title>
    <url>/2019/09/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E6%AD%BB%E9%94%81%E9%81%BF%E5%85%8D%E7%AE%97%E6%B3%95-%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="0、写在前面"><a href="#0、写在前面" class="headerlink" title="0、写在前面"></a>0、写在前面</h2><p>银行家算法（Banker’s Algorithm）是一个避免死锁（Deadlock）的著名算法，是由艾兹格·迪杰斯特拉在1965年为T.H.E系统设计的一种避免死锁产生的算法。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。</p>
<p>你没看错，就是那个Dijkstra</p>
<p>还记得数据结构中的最短路径Dijkstra算法吗？没错就是你想的那样</p>
<p>操作系统进程同步问题中的信号量和PV原语也是Dijkstra提出的，顺便还提出并解决了”哲学家问题”</p>
<p>并且是第一个Algol 60编译器的设计者和实现者。</p>
<p><img src="/images/5bafa40f4bfbfbed0665455c78f0f736afc31fd0.jpg" alt="img"></p>
<p>头发还是比较多的。</p>
<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>在银行中，客户申请贷款的数量是有限的，每个客户在第一次申请贷款时要声明完成该项目所需的最大资金量，在满足所有贷款要求时，客户应及时归还。银行家在客户申请的贷款数量不超过自己拥有的最大值时，都应尽量满足客户的需要。在这样的描述中，银行家就好比操作系统，资金就是资源，客户就相当于要申请资源的进程。</p>
<p>简单的说就是：系统资源有限，要使用银行家算法来进行资源分配要求：既要满足当前正在运行的若干进程运行又要避免因为资源分配问题导致的死锁问题。</p>
<h3 id="说明一些下用到的数据结构"><a href="#说明一些下用到的数据结构" class="headerlink" title="说明一些下用到的数据结构"></a>说明一些下用到的数据结构</h3><p><strong>1）可利用资源向量Available</strong></p>
<p>是个含有m个元素的数组，其中的每一个元素代表一类可利用的资源数目。如果Available[j]=K，则表示系统中现有Rj类资源K个。</p>
<p><strong>2）最大需求矩阵Max</strong></p>
<p>这是一个n×m的矩阵，它定义了系统中n个进程中的每一个进程对m类资源的最大需求。如果Max[i,j]=K，则表示进程i需要Rj类资源的最大数目为K。</p>
<p><strong>3）分配矩阵Allocation</strong></p>
<p>这也是一个n×m的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果Allocation[i,j]=K，则表示进程i当前已分得Rj类资源的 数目为K。</p>
<p><strong>4）需求矩阵Need</strong></p>
<p>这也是一个n×m的矩阵，用以表示每一个进程尚需的各类资源数。如果Need[i,j]=K，则表示进程i还需要Rj类资源K个，方能完成其任务。</p>
<p>Need[i,j]=Max[i,j]-Allocation[i,j]</p>
<p>看一道2018年408题目：</p>
<blockquote>
<p>假设系统中有4个同类资源，进程P1和P2需要的资源数分别为4，3和1，P1，P2和P3已申请到的资源数分别为2，1和0，则执行安全检测算法的结果是（）</p>
<p>A:不存在安全序列，系统处于不安全态</p>
<p>B:存在多个安全序列，系统处于安全状态</p>
<p>C:存在唯一安全序列P3，P1，P2，系统处于安全状态</p>
<p>D:存在唯一安全序列P3，P2，P1，系统处于安全状态</p>
</blockquote>
<p>这道题还是比较简单的，还是那句老话，学习要由浅入深，循序渐进嘛。</p>
<p>首先阅读题目画出下面这张表格</p>
<p><img src="/images/20190922231755.png" alt="img"></p>
<p>问号部分是我们要计算的</p>
<p>对于Available来说还是比较好算出的直接用系统资源总数（本道题就一种资源）减去当前已经分配出去的资源数即可即4-（2+1+0）= 1</p>
<p>对于Need列来说计算也是灰常简单的直接用每个进程对应的Max列减去Allocation列即可</p>
<p>P1进程Need = 4-2=2</p>
<p>P2进程Need = 3-1=2</p>
<p>P3进程Need = 1-0=1</p>
<p><img src="/images/20190922232304.png" alt="img"></p>
<p>现在手动模拟银行家算法进行安全检查：</p>
<p>由于当前可用资源为1，所以扫描Need列时发现只有P3进程需求满足小于等于可用条件，所以只能尝试将资源分配给P3进程；当资源分配给P3进程后P3进程运行完成，此时可用资源数为1+0 = 1,还是1，而P2和P1都需要至少2个资源所以不存在安全序列使得所有进程都能完成。</p>
<p>所以这道题正确答案是：A</p>
<h2 id="2、编码实现"><a href="#2、编码实现" class="headerlink" title="2、编码实现"></a>2、编码实现</h2><p>银行家算法.cpp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dijkstra 于1965年提出能够避免死锁的调度方法，称为银行家算法</span></span><br><span class="line"><span class="comment">// @Author: Michael Jiang sencom1997@outlook.com</span></span><br><span class="line"><span class="comment">// 2019年9月22日 20点26分</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源种类数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> RESOURCE_KIND_NUMS =<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> PROCESS_NUMS = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程完成标志数组</span></span><br><span class="line"><span class="keyword">bool</span> finshed[PROCESS_NUMS] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a,b矩阵相减结果存放在c中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrixSub</span><span class="params">( <span class="keyword">int</span> (*a)[RESOURCE_KIND_NUMS],\</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> (*b)[RESOURCE_KIND_NUMS],\</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> (*c)[RESOURCE_KIND_NUMS])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; RESOURCE_KIND_NUMS; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i][j] = a[i][j] - b[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> (*a)[RESOURCE_KIND_NUMS])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; RESOURCE_KIND_NUMS; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在分配矩阵中求出某个资源的已分配数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAllocationCount</span><span class="params">(<span class="keyword">int</span> (*allocation)[RESOURCE_KIND_NUMS],<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        count += allocation[i][index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出各资源的当前可用量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getAvailable</span><span class="params">(<span class="keyword">int</span> (*available),\</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> (*resource),\</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> (*allocation)[RESOURCE_KIND_NUMS])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; RESOURCE_KIND_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        available[i] = resource[i] - getAllocationCount(allocation,i);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">safeSub</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; RESOURCE_KIND_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; b[i] )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">safeAdd</span><span class="params">(<span class="keyword">int</span> (*allocation)[RESOURCE_KIND_NUMS],<span class="keyword">int</span> (*available),<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; RESOURCE_KIND_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        available[i] += allocation[index][i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isSafe</span><span class="params">(<span class="keyword">int</span> (*available),\</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> (*need)[RESOURCE_KIND_NUMS],\</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> (*max)[RESOURCE_KIND_NUMS],\</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> (*allocation)[RESOURCE_KIND_NUMS])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (safeSub(available,need[i]) &amp;&amp; !finshed[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果够分配的话，就将该进程原先分配的全部收回</span></span><br><span class="line">            safeAdd(allocation,available,i);</span><br><span class="line">            <span class="comment">//将线程完成标志置true</span></span><br><span class="line">            finshed[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Process-%d ==&gt; &quot;</span>,i);</span><br><span class="line">            isSafe(available,need,max,allocation);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 资源数目</span></span><br><span class="line">    <span class="keyword">int</span> resource[RESOURCE_KIND_NUMS] = &#123;</span><br><span class="line">        <span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可利用资源向量</span></span><br><span class="line">    <span class="keyword">int</span> available[RESOURCE_KIND_NUMS];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大需求矩阵</span></span><br><span class="line">    <span class="keyword">int</span> max[PROCESS_NUMS][RESOURCE_KIND_NUMS] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">5</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配矩阵</span></span><br><span class="line">    <span class="keyword">int</span> allocation[PROCESS_NUMS][RESOURCE_KIND_NUMS] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需求矩阵</span></span><br><span class="line">    <span class="keyword">int</span> need[PROCESS_NUMS][RESOURCE_KIND_NUMS];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求出need矩阵</span></span><br><span class="line">    matrixSub(max,allocation,need);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求出当前可用资源数</span></span><br><span class="line">    getAvailable(available,resource,allocation);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;allocation(分配矩阵):\n&quot;</span>);</span><br><span class="line">    printMatrix(allocation);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max(最大需求矩阵):\n&quot;</span>);</span><br><span class="line">    printMatrix(max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;need(需求矩阵):\n&quot;</span>);</span><br><span class="line">    printMatrix(need);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;available(可利用资源向量):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; RESOURCE_KIND_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;available[%d] = %d\n&quot;</span>,i,available[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行安全检查</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;安全序列:\n&quot;</span>);</span><br><span class="line">    isSafe(available,need,max,allocation);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;各进程完成情况:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">bool</span> safe = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMS; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Process-%d : %s\n&quot;</span>,i,finshed[i]?<span class="string">&quot;finshed&quot;</span>:<span class="string">&quot;locked&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!finshed[i])&#123;</span><br><span class="line">            safe = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否安全:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;isSafe=%s\n&quot;</span>,safe?<span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码模拟的是5个进程P0~P4和三种资源0，1，2在给定的状态下看到系统是否处于安全状态。</p>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang\Desktop\408数据结构&gt;g++ 银行家算法.cpp &amp;&amp; a.exe</span><br><span class="line">allocation(分配矩阵):</span><br><span class="line">0 0 3</span><br><span class="line">1 0 0</span><br><span class="line">1 3 5</span><br><span class="line">0 0 2</span><br><span class="line">0 0 1</span><br><span class="line"></span><br><span class="line">max(最大需求矩阵):</span><br><span class="line">0 0 4</span><br><span class="line">1 7 5</span><br><span class="line">2 3 5</span><br><span class="line">0 6 4</span><br><span class="line">0 6 5</span><br><span class="line"></span><br><span class="line">need(需求矩阵):</span><br><span class="line">0 0 1</span><br><span class="line">0 7 5</span><br><span class="line">1 0 0</span><br><span class="line">0 6 2</span><br><span class="line">0 6 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">available(可利用资源向量):</span><br><span class="line">available[0] &#x3D; 1</span><br><span class="line">available[1] &#x3D; 4</span><br><span class="line">available[2] &#x3D; 0</span><br><span class="line"></span><br><span class="line">安全序列:</span><br><span class="line">Process-2 &#x3D;&#x3D;&gt; Process-0 &#x3D;&#x3D;&gt; Process-1 &#x3D;&#x3D;&gt; Process-3 &#x3D;&#x3D;&gt; Process-4 &#x3D;&#x3D;&gt;</span><br><span class="line"></span><br><span class="line">各进程完成情况:</span><br><span class="line">Process-0 : finshed</span><br><span class="line">Process-1 : finshed</span><br><span class="line">Process-2 : finshed</span><br><span class="line">Process-3 : finshed</span><br><span class="line">Process-4 : finshed</span><br><span class="line"></span><br><span class="line">是否安全:</span><br><span class="line">isSafe&#x3D;true</span><br></pre></td></tr></table></figure>

<hr>
<p>下面对main()方法做一些简单的修改：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 资源数目</span></span><br><span class="line"><span class="keyword">int</span> resource[RESOURCE_KIND_NUMS] = &#123;</span><br><span class="line">    <span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将上面的代码改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 资源数目c</span></span><br><span class="line"><span class="keyword">int</span> resource[RESOURCE_KIND_NUMS] = &#123;</span><br><span class="line">    <span class="number">3</span>,<span class="number">4</span>,<span class="number">12</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再次执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang\Desktop\408数据结构&gt;g++ 银行家算法.cpp &amp;&amp; a.exe</span><br><span class="line">allocation(分配矩阵):</span><br><span class="line">0 0 3</span><br><span class="line">1 0 0</span><br><span class="line">1 3 5</span><br><span class="line">0 0 2</span><br><span class="line">0 0 1</span><br><span class="line"></span><br><span class="line">max(最大需求矩阵):</span><br><span class="line">0 0 4</span><br><span class="line">1 7 5</span><br><span class="line">2 3 5</span><br><span class="line">0 6 4</span><br><span class="line">0 6 5</span><br><span class="line"></span><br><span class="line">need(需求矩阵):</span><br><span class="line">0 0 1</span><br><span class="line">0 7 5</span><br><span class="line">1 0 0</span><br><span class="line">0 6 2</span><br><span class="line">0 6 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">available(可利用资源向量):</span><br><span class="line">available[0] &#x3D; 1</span><br><span class="line">available[1] &#x3D; 1</span><br><span class="line">available[2] &#x3D; 1</span><br><span class="line"></span><br><span class="line">安全序列:</span><br><span class="line">Process-0 &#x3D;&#x3D;&gt; Process-2 &#x3D;&#x3D;&gt;</span><br><span class="line"></span><br><span class="line">各进程完成情况:</span><br><span class="line">Process-0 : finshed</span><br><span class="line">Process-1 : locked</span><br><span class="line">Process-2 : finshed</span><br><span class="line">Process-3 : locked</span><br><span class="line">Process-4 : locked</span><br><span class="line"></span><br><span class="line">是否安全:</span><br><span class="line">isSafe&#x3D;false</span><br></pre></td></tr></table></figure>

<p>这就不安全了，不相信？要不你手算一下？</p>
]]></content>
      <tags>
        <tag>c</tag>
        <tag>algo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本操作之branch与merge</title>
    <url>/2019/09/22/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B9%8Bbranch%E4%B8%8Emerge/</url>
    <content><![CDATA[<p>还是拿上次的哪个GitTest项目进行学习branch和merge操作。</p>
<p>在操作之前我已经将项目pull回本地的gittest目录下面了。</p>
<p><strong>1.查看当前有哪些branch</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (master)</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>可以看出只有master</p>
<p><strong>2.新建一个名为test1 的分支</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (master)</span><br><span class="line">$ git branch test1</span><br></pre></td></tr></table></figure>

<p><strong>3.切换到test1分支</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (master)</span><br><span class="line">$ git checkout test1</span><br><span class="line">Switched to branch &#39;test1&#39;</span><br><span class="line"></span><br><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (test1)</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>可以看出当前位置已经从master切换到test1了</p>
<p>【当然你也可以一键创建分支和切换branch】命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$git checkout -b test1</span><br></pre></td></tr></table></figure>

<p><strong>4.修改branch的名字</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (test1)</span><br><span class="line">$ git branch -m test1 test1.0</span><br><span class="line"></span><br><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (test1.0)</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>可以看出已经成功将branch的名字从test1改为test1.0</p>
<hr>
<p>接下来对test1.0分支的代码进行一些修改</p>
<p>这个项目从master分支过来时只有两个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bigChange.sen</span><br><span class="line">hello.md</span><br></pre></td></tr></table></figure>

<p>现在在分支中添加一个新文件sayHello.py并修改了hello.md中的内容。</p>
<p>然后执行了add 和 commit</p>
<p>接下来就进行合并？</p>
<p>合并前突发奇想不如push一下branch版吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (test1.0)</span><br><span class="line">$ git push origin test1.0</span><br><span class="line">Enumerating objects: 6, done.</span><br><span class="line">Counting objects: 100% (6&#x2F;6), done.</span><br><span class="line">Delta compression using up to 6 threads</span><br><span class="line">Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">Writing objects: 100% (4&#x2F;4), 368 bytes | 184.00 KiB&#x2F;s, done.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote:</span><br><span class="line">remote: Create a pull request for &#39;test1.0&#39; on GitHub by visiting:</span><br><span class="line">remote:      https:&#x2F;&#x2F;github.com&#x2F;MichaelJiang1997&#x2F;GitTest&#x2F;pull&#x2F;new&#x2F;test1.0</span><br><span class="line">remote:</span><br><span class="line">To github.com:MichaelJiang1997&#x2F;GitTest.git</span><br><span class="line"> * [new branch]      test1.0 -&gt; test1.0</span><br></pre></td></tr></table></figure>

<p>嗯。。。去Github瞅瞅（最近访问GitHub有点困难）</p>
<p><img src="/images/20190922143513.png" alt="img"></p>
<p>稳！</p>
<p>合并合并！！！</p>
<p>首先切换到想要合并到的分枝下，运行’git merge’命令 （例如本例中将test1.0分支合并到master分支的话，进入master分支运行git merge test1.0命令）如果合并顺利的话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (master)</span><br><span class="line">$ git merge test1.0</span><br><span class="line">Updating d4b58f7..7b9fe0b</span><br><span class="line">Fast-forward</span><br><span class="line"> Hello.md    | 4 +++-</span><br><span class="line"> sayHello.py | 1 +</span><br><span class="line"> 2 files changed, 4 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 sayHello.py</span><br></pre></td></tr></table></figure>

<p>合并成功。</p>
<p>在主分支git log一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;gittest (master)</span><br><span class="line">$ git log</span><br><span class="line">commit 7b9fe0b7b246653ab822b6824b9157244ea0a983 (HEAD -&gt; master, origin&#x2F;test1.0, origin&#x2F;master, test1.0)</span><br><span class="line">Author: MichaelJiang1997 &lt;592348268@qq.com&gt;</span><br><span class="line">Date:   Sun Sep 22 14:27:32 2019 +0800</span><br><span class="line"></span><br><span class="line">    add say hello</span><br><span class="line"></span><br><span class="line">commit d4b58f7e7b2cc676aefe2aaf50e8cbfd2742eb6d</span><br><span class="line">Author: MichaelJiang1997 &lt;592348268@qq.com&gt;</span><br><span class="line">Date:   Sun Sep 15 16:20:15 2019 +0800</span><br><span class="line"></span><br><span class="line">    测试改动</span><br><span class="line"></span><br><span class="line">commit 5e3f81db2777533ff78c28b94af987a0f81c4e11</span><br><span class="line">Author: MichaelJiang1997 &lt;592348268@qq.com&gt;</span><br><span class="line">Date:   Sun Sep 15 15:40:04 2019 +0800</span><br><span class="line"></span><br><span class="line">    test</span><br></pre></td></tr></table></figure>

<p>OK！</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>初试Finiate Automata之简单正则匹配</title>
    <url>/2019/09/22/%E5%88%9D%E8%AF%95Finiate-Automata%E4%B9%8B%E7%AE%80%E5%8D%95%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<blockquote>
<p>Why Study Automata Theory<br> There are several reasons why the study of automata and complexity is an<br> important part of the core of Computer Science…</p>
</blockquote>
<p>摘自John E. Hopcroft, Rajeev Motwani, Jeffrey D. Ullman-Introduction to Automata Theory, Languages, and Computations-Prentice Hall (2006)</p>
<p>对于 Finiate Automata按照转移函数的不同可以分为<strong>确定型有穷自动机（Determinism Finite Automate, DFA）</strong>，与<strong>非确定型有穷自动机（Non-determinism Finite Automate, NFA）</strong>。<br> 本次主要拿DFA来练练手，不要一上来就想搞个大新闻 ，要由浅入深，循序渐进的学习，这样才能闷声发大财。</p>
<p>所以不要认为这些Too Young Too Simple 的东西不值一提，作为码农要提高自己的姿势水平。你们啊Navie</p>
<p>看题目：</p>
<blockquote>
<p>// 考虑仅由字母{a, b}组成的字符串，要求字符串中字母b必须成对出现，<br> // 否则字符串非法。这个规则实现起来其实非常简单，不需要自动机也完全可以。<br> // 但是我们考虑使用自动机来进行判断。顺便，该规则的正规表达式描述是：(a|bb)*。<br> // 星号运算代表重复若干次，包括零次。</p>
</blockquote>
<p>根据题目要求可以得出以下DFA有向图：</p>
<p><img src="/images/20190922083722.png" alt="img"></p>
<p>可知只有0号状态才是合法的。</p>
<p>程序初始为0状态，然后根据读入的字符进行状态变化，最终的状态若回到0就代表输入的字符串符合表达式要求，若为其他状态则不符合要求。</p>
<p>那么用什么来表达这种数据结构呢？</p>
<p>首先想到的就是邻接矩阵啊，用它来存储图还是比较方便的蛤蛤！</p>
<p>但在实际操作的过程中发现对于2号状态有两条从自己出发指向自己的弧，这种情况使用邻接矩阵就不是很容易表示了。所以果断放弃邻接矩阵方式存储，</p>
<p>转而选用邻接表来存储这个DFA有向图。</p>
<p><img src="/images/20190922ndidnbaisdnias.png" alt="img"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  @Authour : Michael Jiang 2019年9月22日</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> weight;                <span class="comment">//状态之间转换的条件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">headNode</span> *<span class="title">nextStatus</span>;</span><span class="comment">//下一个状态的节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span>      <span class="comment">//下一个同弧尾节点</span></span><br><span class="line">    LinkNode(<span class="keyword">char</span> w, headNode *ns):  </span><br><span class="line">        weight(w),nextStatus(ns),next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">headNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> statusID;               <span class="comment">//状态标志</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span>      <span class="comment">//从该状态指出的所有弧节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    headNode *head = <span class="keyword">new</span> headNode[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成相应的确定性有穷自动机</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i].statusID = i;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkNode *p;</span><br><span class="line">    p = <span class="keyword">new</span> LinkNode(<span class="string">&#x27;a&#x27;</span>, &amp;head[<span class="number">0</span>]);</span><br><span class="line">    head[<span class="number">0</span>].next = p;</span><br><span class="line">    p-&gt;next = <span class="keyword">new</span> LinkNode(<span class="string">&#x27;b&#x27;</span>, &amp;head[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    p = <span class="keyword">new</span> LinkNode(<span class="string">&#x27;b&#x27;</span>, &amp;head[<span class="number">0</span>]);</span><br><span class="line">    head[<span class="number">1</span>].next = p;</span><br><span class="line">    p-&gt;next = <span class="keyword">new</span> LinkNode(<span class="string">&#x27;a&#x27;</span>, &amp;head[<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    p = <span class="keyword">new</span> LinkNode(<span class="string">&#x27;a&#x27;</span>, &amp;head[<span class="number">2</span>]);</span><br><span class="line">    head[<span class="number">2</span>].next = p;</span><br><span class="line">    p-&gt;next = <span class="keyword">new</span> LinkNode(<span class="string">&#x27;b&#x27;</span>, &amp;head[<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断输入的字符串str是否符合规则</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLegal</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nowStatus = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LinkNode *p;      </span><br><span class="line">        p = head[nowStatus].next;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;weight == str[i])&#123;            </span><br><span class="line">                nowStatus = p-&gt;nextStatus-&gt;statusID;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nowStatus==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str[<span class="number">6</span>] =&#123;</span><br><span class="line">         <span class="string">&quot;abb&quot;</span>,</span><br><span class="line">         <span class="string">&quot;aaabb&quot;</span>,</span><br><span class="line">         <span class="string">&quot;bbaa&quot;</span>,</span><br><span class="line">         <span class="string">&quot;bab&quot;</span>,</span><br><span class="line">         <span class="string">&quot;aba&quot;</span>,</span><br><span class="line">         <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造确定性有穷自动机</span></span><br><span class="line">    makeDFA();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str[%d] = %s \t: isLegal=%d\t\n&quot;</span>,i,str[i],isLegal(str[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang\Desktop\Automata&gt;g++ main.cpp &amp;&amp; a.exe</span><br><span class="line">str[0] &#x3D; abb    : isLegal&#x3D;1</span><br><span class="line">str[1] &#x3D; aaabb  : isLegal&#x3D;1</span><br><span class="line">str[2] &#x3D; bbaa   : isLegal&#x3D;1</span><br><span class="line">str[3] &#x3D; bab    : isLegal&#x3D;0</span><br><span class="line">str[4] &#x3D; aba    : isLegal&#x3D;0</span><br><span class="line">str[5] &#x3D;        : isLegal&#x3D;1</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c</tag>
        <tag>algo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本操作之从GitHub下载和上传项目</title>
    <url>/2019/09/15/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B9%8B%E4%BB%8EGitHub%E4%B8%8B%E8%BD%BD%E5%92%8C%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>看了一下上一篇是八月二十七号写的，今天已经九月十五号了。期间本来应该有一个小企鹅输入法的，但是由于没能调试完成所以又被延期了，至于什么时候能搞好，我自己也不知道。</p>
<p>那么这半个月都干了啥？</p>
<p>1.这学期开发环境基本钦定为JetBrains全家桶（Eclipse已经被无情的抛弃了）</p>
<p>2.开启了新的课程表（全部排满）</p>
<p>3.开始leetcode刷题（还是嫌自己头发多）</p>
<p>4.努力学习，红专迸进！</p>
<hr>
<p>正文：</p>
<p>首先看一下我的Git版本哈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Michael Jiang&gt; git --version</span><br><span class="line">git version 2.21.0.windows.1</span><br></pre></td></tr></table></figure>

<p>我这个git装的比较早，以前只知道用git clone 哈哈（本以为git就是方便窃别人代码的）</p>
<p>真是对不起Linus老人家，搞的这个东西这么excting，我现在才来学习。</p>
<p>对待技术只要我们愿意付出，它都会给与我们最大的帮助。</p>
<h2 id="1-在GitHub创建一个空项目"><a href="#1-在GitHub创建一个空项目" class="headerlink" title="1.在GitHub创建一个空项目"></a>1.在GitHub创建一个空项目</h2><p>写个名字就可以了</p>
<h2 id="2-在本地初始化一个Git"><a href="#2-在本地初始化一个Git" class="headerlink" title="2.在本地初始化一个Git"></a>2.在本地初始化一个Git</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Michael Jiang@DESKTOP-JUOEVVQ MINGW64 ~&#x2F;Desktop&#x2F;HelloProject&#x2F;GitTest</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in C:&#x2F;Users&#x2F;Michael Jiang&#x2F;Desktop&#x2F;HelloProject&#x2F;GitTest&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="3-创建SSH密钥对"><a href="#3-创建SSH密钥对" class="headerlink" title="3.创建SSH密钥对"></a>3.创建SSH密钥对</h2><p><img src="/images/20190915151607.png" alt="img"></p>
<h2 id="4-将pub-key配置到Github中"><a href="#4-将pub-key配置到Github中" class="headerlink" title="4.将pub key配置到Github中"></a>4.将pub key配置到Github中</h2><p>在github设置中，有相关ssh的配置。</p>
<p>配置完成后结果如下：</p>
<p><img src="/images/20190915152015.png" alt="img"></p>
<h2 id="5-本地git连接GitHub"><a href="#5-本地git连接GitHub" class="headerlink" title="5.本地git连接GitHub"></a>5.本地git连接GitHub</h2><p>在git命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/20190915152416.png" alt="img"></p>
<p>登陆到github上查看刚刚输入的SSH key，现在图标的颜色变为绿色，说明密钥配置有效；现在可以在git命令行上进行git操作了。</p>
<h2 id="6-上传本地项目到仓库"><a href="#6-上传本地项目到仓库" class="headerlink" title="6.上传本地项目到仓库"></a>6.上传本地项目到仓库</h2><p>（1）上传到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:yourName&#x2F;yourRepo.gitwison</span><br></pre></td></tr></table></figure>

<p>yourName是你的用户名，yourRepo.gitwison是你要上传项目的仓库。</p>
<p>（2）添加你要上传的文件，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . </span><br></pre></td></tr></table></figure>

<p>.代表上传目录下所有文件，可以在git add后面加上你要添加的文件，比如git add test.md</p>
<p>(3)提交项目，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -a -m &quot;wison&quot; </span><br></pre></td></tr></table></figure>

<p><code>wison</code>是标记谁上传。再输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>大功告成!</p>
<p><img src="/images/20190915154038.png" alt="img"></p>
<p>在GitHub查看项目</p>
<p><img src="/images/20190915154127.png" alt="img"></p>
<p>OK!</p>
<p>通过上面的一顿操作，最后去设置里面看一下SSH小钥匙终于绿了，&lt; _ &gt;</p>
<p><img src="/images/20190915155125.png" alt="img"></p>
<hr>
<p>至此push基本操作结束，下面简单介绍一下pull操作吧！</p>
<p><img src="/images/20190915162127.png" alt="img"></p>
<p>具体流程就是把我的GitHub上的GitTest项目拉到本地，然后做了一些改动（添加了一个新文件），最后将改动后的项目再次推到Github上。</p>
<p>此时再去Github查看：</p>
<p><img src="/images/20190915162422.png" alt="img"></p>
<p>操作成功！</p>
<p>最后：配置SSH密钥后免去了每次输入账号密码的麻烦，采用Git这种极为先进的版本控制系统来管理我们的项目是非常有必要的；用了就回不去了。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Foreach 循环中进行元素的remove/add操作？</title>
    <url>/2019/08/27/Foreach-%E5%BE%AA%E7%8E%AF%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%85%83%E7%B4%A0%E7%9A%84remove-add%E6%93%8D%E4%BD%9C%EF%BC%9F/</url>
    <content><![CDATA[<p>今天看<strong>java开发手册（华山版）</strong>时发现一个巨坑！！！</p>
<p>话说阿里搞的这个东西真是<strong>excited</strong>！</p>
<p>手册上是这样描述的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">11.</span> 【强制】不要在foreach循环里进行元素的remove/add操作。remove元素请使用Iterator方式，如果并发操作，需要对Iterator对象加锁。</span><br><span class="line">正例：</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String item = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (删除元素的条件) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">反例：</span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(item)) &#123;</span><br><span class="line">        list.remove(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“<span class="number">1</span>”换成“<span class="number">2</span>”，会是同样的结果吗？</span><br></pre></td></tr></table></figure>

<p>上面代码删除List中的“1”时候是没有问题的，但是当我测试他这个说明时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</span><br></pre></td></tr></table></figure>

<p>正例的代码就是正例，没有任何问题；反例就不行了直接报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="line">	at java.util.ArrayList$Itr.checkForComodification(Unknown Source)</span><br><span class="line">	at java.util.ArrayList$Itr.next(Unknown Source)</span><br><span class="line">	at top.sencom.redis.Demo.RedisDemo.main(RedisDemo.java:22)</span><br></pre></td></tr></table></figure>

<p>那就来仔细研究一下到底怎么回事！</p>
<p>问题首先出现在<code>ava.util.ArrayList$Itr.next</code></p>
<p>哎，对于反例用的可是foreach循环啊，咋报错中有迭代器字样的东西（Itr），莫非这个foreach循环就是用迭代器实现的？？？！！！</p>
<p>通过询问度娘得到如下结果：<a href="https://blog.csdn.net/a596620989/article/details/6930479">https://blog.csdn.net/a596620989/article/details/6930479</a></p>
<p>通过这篇文章可以得出<strong>：foreach语法最终被编译器转为了对Iterator.next()的调用</strong></p>
<p>这样的话就是来回翻一翻，瞅一瞅</p>
<p><strong>java.util.ArrayList</strong></p>
<p><strong>java.util.AbstractList</strong></p>
<p>于是乎就找到了这个地方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Index of element to be returned by subsequent call to next.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Index of element returned by most recent call to next or</span></span><br><span class="line"><span class="comment">         * previous.  Reset to -1 if this element is deleted by a call</span></span><br><span class="line"><span class="comment">         * to remove.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The modCount value that the iterator believes that the backing</span></span><br><span class="line"><span class="comment">         * List should have.  If this expectation is violated, the iterator</span></span><br><span class="line"><span class="comment">         * has detected concurrent modification.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                E next = get(i);</span><br><span class="line">                lastRet = i;</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                    cursor--;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当我们用foreach时迭代器初始时<code> int expectedModCount = modCount;</code></p>
<p>这里的modCount该值表示对List的修改次数，它是在父类<strong>java.util.AbstractList</strong>中定义的，查看ArrayList的add()和remove()方法就可以发现，每次调用add()方法或者remove()方法就会对modCount进行加1操作。</p>
<p>此时你在foreach循环里面执行<code>list.remove(item);</code></p>
<p>元素是移除了，但是<strong>ArrayList 类中的remove（）方法会使</strong>modeCount++；而foreach循环的迭代器中的<code>expectedModCount </code>并没有++，这就会使的在迭代器调用next（）方法时调用checkForComodification()方法中发现<code>modCount != expectedModCount</code>从而<code> throw new ConcurrentModificationException();</code></p>
<p><strong>好，既然知道了错误出在什么地方；那么就想办法避免这个问题吧。</strong></p>
<p><strong>那就是在使用迭代器时移除元素需要使用迭代器的移除方法而非List的移除方法！</strong></p>
<p>就像正例中那样即可！</p>
<p>其实在JDK中也有类似表述：</p>
<blockquote>
<p>The iterators returned by this class’s <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#iterator--"><code>iterator</code></a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#listIterator-int-"><code>listIterator</code></a> methods are <em>fail-fast</em>: if the list is structurally modified at any time after the iterator is created, in any way except through the iterator’s own <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#remove--"><code>remove</code></a> or <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#add-E-"><code>add</code></a> methods, the iterator will throw a<a href="https://docs.oracle.com/javase/8/docs/api/java/util/ConcurrentModificationException.html"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails  quickly and cleanly, rather than risking arbitrary, non-deterministic  behavior at an undetermined time in the future.</p>
</blockquote>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html%E3%80%81">https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html、</a></p>
<p><strong>在回头来看问什么移除“1”可以？</strong></p>
<p>这还得在分析一下：</p>
<p>“1”这个元素在list的倒数第二个当它被list的remove（）方法移除之后</p>
<p>list的size（）会减少；而cursor表示当前位置。</p>
<p>迭代器完成一次循环执行<code> public boolean hasNext() &#123;            return cursor != size();        &#125;</code></p>
<p>时就会返回fase从而终止循环：也就是说当你往列表中添加两个元素都为“1”时你会发现foreach循环只能删除一个。也就是第一个“1”.</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven? &amp;&amp; Java连接Redis</title>
    <url>/2019/08/26/Maven-Java%E8%BF%9E%E6%8E%A5Redis/</url>
    <content><![CDATA[<blockquote>
<p>Apache Maven is a software project management and  comprehension tool. Based on the concept of a project object model  (POM), Maven can manage a project’s build, reporting and documentation  from a central piece of information.</p>
<p>If you think that Maven could help your project, you can find out  more information in the “About Maven” section of the navigation: this  includes an in-depth description of <a href="http://maven.apache.org/what-is-maven.html">what Maven is</a> and a <a href="http://maven.apache.org/maven-features.html">list of some of its main features</a>.</p>
<p>This site is separated into the following sections, depending on how you’d like to use Maven:</p>
</blockquote>
<p>首先去Apache官网下载Maven：<a href="http://maven.apache.org/">http://maven.apache.org</a></p>
<p>将对应的压缩包解压出来这里我使用的是Windows系统解压到在C:\maven下面然后根据压缩包中的README.txt提示进行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                        Apache Maven</span><br><span class="line"></span><br><span class="line">What is it?</span><br><span class="line">-----------</span><br><span class="line"></span><br><span class="line">Maven is a software project management and comprehension tool. Based on</span><br><span class="line">the concept of a Project Object Model (POM), Maven can manage a project&#39;s</span><br><span class="line">build, reporting and documentation from a central piece of information.</span><br><span class="line"></span><br><span class="line">Documentation</span><br><span class="line">-------------</span><br><span class="line"></span><br><span class="line">The most up-to-date documentation can be found at https:&#x2F;&#x2F;maven.apache.org&#x2F;.</span><br><span class="line"></span><br><span class="line">Release Notes</span><br><span class="line">-------------</span><br><span class="line"></span><br><span class="line">The full list of changes can be found at https:&#x2F;&#x2F;maven.apache.org&#x2F;docs&#x2F;history.html.</span><br><span class="line"></span><br><span class="line">System Requirements</span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line">JDK:</span><br><span class="line">  1.7 or above (this is to execute Maven - it still allows you to build against 1.3</span><br><span class="line">  and prior JDK&#39;s).</span><br><span class="line">Memory:</span><br><span class="line">  No minimum requirement.</span><br><span class="line">Disk:</span><br><span class="line">  Approximately 10MB is required for the Maven installation itself. In addition to</span><br><span class="line">  that, additional disk space will be used for your local Maven repository. The size</span><br><span class="line">  of your local repository will vary depending on usage but expect at least 500MB.</span><br><span class="line">Operating System:</span><br><span class="line">  Windows:</span><br><span class="line">    Windows 2000 or above.</span><br><span class="line">  Unix based systems (Linux, Solaris and Mac OS X) and others:</span><br><span class="line">    No minimum requirement.</span><br><span class="line"></span><br><span class="line">Installing Maven</span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">1) Unpack the archive where you would like to store the binaries, e.g.:</span><br><span class="line"></span><br><span class="line">  Unix-based operating systems (Linux, Solaris and Mac OS X)</span><br><span class="line">    tar zxvf apache-maven-3.x.y.tar.gz</span><br><span class="line">  Windows</span><br><span class="line">    unzip apache-maven-3.x.y.zip</span><br><span class="line"></span><br><span class="line">2) A directory called &quot;apache-maven-3.x.y&quot; will be created.</span><br><span class="line"></span><br><span class="line">3) Add the bin directory to your PATH, e.g.:</span><br><span class="line"></span><br><span class="line">  Unix-based operating systems (Linux, Solaris and Mac OS X)</span><br><span class="line">    export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven-3.x.y&#x2F;bin:$PATH</span><br><span class="line">  Windows</span><br><span class="line">    set PATH&#x3D;&quot;c:\program files\apache-maven-3.x.y\bin&quot;;%PATH%</span><br><span class="line"></span><br><span class="line">4) Make sure JAVA_HOME is set to the location of your JDK</span><br><span class="line"></span><br><span class="line">5) Run &quot;mvn --version&quot; to verify that it is correctly installed.</span><br><span class="line"></span><br><span class="line">For complete documentation, see https:&#x2F;&#x2F;maven.apache.org&#x2F;download.html#Installation</span><br><span class="line"></span><br><span class="line">Licensing</span><br><span class="line">---------</span><br><span class="line"></span><br><span class="line">Please see the file called LICENSE.</span><br><span class="line"></span><br><span class="line">Maven URLS</span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">Home Page:          https:&#x2F;&#x2F;maven.apache.org&#x2F;</span><br><span class="line">Downloads:          https:&#x2F;&#x2F;maven.apache.org&#x2F;download.html</span><br><span class="line">Release Notes:      https:&#x2F;&#x2F;maven.apache.org&#x2F;docs&#x2F;history.html</span><br><span class="line">Mailing Lists:      https:&#x2F;&#x2F;maven.apache.org&#x2F;mailing-lists.html</span><br><span class="line">Source Code:        https:&#x2F;&#x2F;gitbox.apache.org&#x2F;repos&#x2F;asf&#x2F;maven.git</span><br><span class="line">Issue Tracking:     https:&#x2F;&#x2F;issues.apache.org&#x2F;jira&#x2F;browse&#x2F;MNG</span><br><span class="line">Wiki:               https:&#x2F;&#x2F;cwiki.apache.org&#x2F;confluence&#x2F;display&#x2F;MAVEN&#x2F;</span><br><span class="line">Available Plugins:  https:&#x2F;&#x2F;maven.apache.org&#x2F;plugins&#x2F;</span><br></pre></td></tr></table></figure>

<p>根据上面的方法设置完成后进入cmd输入mvn -version得到如下类似结果就说明你的Maven安装完成了！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Michael Jiang&gt;mvn -version</span><br><span class="line">Apache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-05T03:00:29+08:00)</span><br><span class="line">Maven home: C:\maven\bin\..</span><br><span class="line">Java version: 1.8.0_181, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_181\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure>

<p>然后就是打开conf/setting.xml文件配置一个国内镜像（这里就用阿里云吧）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">	 <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">	 <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">	 <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置好了，就建一个Maven工程来测试一下Java连接Redis吧？"><a href="#设置好了，就建一个Maven工程来测试一下Java连接Redis吧？" class="headerlink" title="设置好了，就建一个Maven工程来测试一下Java连接Redis吧？"></a>设置好了，就建一个Maven工程来测试一下Java连接Redis吧？</h3><p><strong>1.打开Eclipse新建一个Maven工程</strong></p>
<p><img src="/images/20190826090709.png" alt="img"></p>
<p>在测试下面建一个RedisDemo.java文件</p>
<p><strong>2.打开工程pom文件添加jar包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>需要jar包可以到<a href="https://mvnrepository.com/%E4%B8%8A%E5%AF%BB%E6%89%BE%EF%BC%8C%E9%9D%9E%E5%B8%B8%E6%96%B9%E4%BE%BF%EF%BC%81">https://mvnrepository.com/上寻找，非常方便！</a></p>
<p>添加好后Eclipse就会自动帮我们下载依赖</p>
<p><img src="/images/20190826091001.png" alt="img"></p>
<p>可以看到关于redis的依赖已经下载完成！</p>
<p><strong>3.编写测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.redis.Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		String host = <span class="string">&quot;sencom.top&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line">		<span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">		Jedis jedis = <span class="keyword">new</span> Jedis(host,port);</span><br><span class="line">		jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		System.out.println(jedis.ping());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果连接成功应该可以看到这样的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PONG</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Redis 字符串类型存取</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取redis 连接</span></span><br><span class="line">		String host = <span class="string">&quot;sencom.top&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line">		<span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">		Jedis jedis = <span class="keyword">new</span> Jedis(host,port);</span><br><span class="line">		jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		jedis.set(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;没压岁钱了&quot;</span>);</span><br><span class="line">		jedis.set(<span class="string">&quot;china&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(jedis.get(<span class="string">&quot;mysql&quot;</span>));</span><br><span class="line">		System.out.println(jedis.get(<span class="string">&quot;china&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭连接</span></span><br><span class="line">		jedis.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">没压岁钱了</span><br><span class="line">中国</span><br></pre></td></tr></table></figure>

<h3 id="连接池配置"><a href="#连接池配置" class="headerlink" title="连接池配置"></a>连接池配置</h3><p><strong>RedisPoolUtil.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.redis.Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPoolUtil</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> JedisPool pool;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		String host = <span class="string">&quot;sencom.top&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line">		</span><br><span class="line">		JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">		poolConfig.setMaxTotal(<span class="number">10</span>);	<span class="comment">//最大连接数</span></span><br><span class="line">		poolConfig.setMaxIdle(<span class="number">1</span>);	<span class="comment">//最大空闲数</span></span><br><span class="line">		</span><br><span class="line">		pool = <span class="keyword">new</span> JedisPool(poolConfig,host,port);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Jedis jedis = pool.getResource();</span><br><span class="line">		jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> jedis;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Jedis jedis)</span> </span>&#123;</span><br><span class="line">		jedis.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>RedisDemo.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sencom.redis.Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Redis 字符串类型存取</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 获取redis 连接</span></span><br><span class="line">		Jedis jedis = RedisPoolUtil.getJedis();</span><br><span class="line">		</span><br><span class="line">		jedis.set(<span class="string">&quot;asus&quot;</span>, <span class="string">&quot;华硕&quot;</span>);</span><br><span class="line">		jedis.set(<span class="string">&quot;msi&quot;</span>, <span class="string">&quot;微星&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(jedis.get(<span class="string">&quot;asus&quot;</span>));</span><br><span class="line">		System.out.println(jedis.get(<span class="string">&quot;msi&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭连接</span></span><br><span class="line">		RedisPoolUtil.close(jedis);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时再执行t1的单元测试结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">华硕</span><br><span class="line">微星</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
        <tag>maven</tag>
      </tags>
  </entry>
</search>
